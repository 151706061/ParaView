<ServerManagerConfiguration>
  <ProxyGroup name="representations">
    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="GeometryRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>ParaView's default representation for showing any type of
      dataset in the render view.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkDataSet" />
          <DataType value="vtkGenericDataSet" />

          <!-- for MB, we want to match if any of the leaf nodes is of the following type -->
          <DataType value="vtkDataObjectTree" child_match="any">
            <DataType value="vtkDataSet" />
            <DataType value="vtkGenericDataSet" />
          </DataType>

        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <!-- End of GeometryRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="UnstructuredGridRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show unstructured grid as
      Surface/Outline/Points/Wireframe/Volume</Documentation>
      <!-- this adds to what is already defined in PVRepresentationBase -->
      <RepresentationType subproxy="VolumeRepresentation"
                          text="Volume" />
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkUnstructuredGrid" />
          <DataType value="vtkUnstructuredGridBase" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="VolumeRepresentation"
               proxygroup="representations"
               proxyname="UnstructuredGridVolumeRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup label="Volume Rendering">
            <Property name="ScalarOpacityFunction" />
            <Property name="ScalarOpacityUnitDistance"
                      panel_visibility="advanced" />
            <Property name="UseSeparateOpacityArray"
                      panel_visibility="advanced" />
            <Property name="OpacityArrayName"
                      panel_visibility="advanced" />
            <Property name="OpacityComponent"
                      panel_visibility="advanced" />
            <Property name="SelectMapper"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="SamplingDimensions"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume"/>
            <Property name="UseFloatingPointFrameBuffer" />
            <Hints>
              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="or">
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="Volume" />
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="NVIDIA IndeX" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <!-- pqDisplayRepresentationWidget respects this hint to put out
             a warning for the user before switching to this type of Representation.
             The user can then accept or reject the change.
             BUG #15117
        -->
        <WarnOnRepresentationChange value="Volume" />
        <!-- pqDisplayColorWidget disables "Solid Color" for this representation type -->
        <NoSolidColor representation="Volume" />
      </Hints>
      <!-- End of UnstructuredGridRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVCellGridRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="CellGridRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show cell grids as
      Surface/Surface+Edges/Wireframe</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkCellGrid" />

          <!-- for MB, we want to match if any of the leaf nodes is of the following type -->
          <DataType value="vtkDataObjectTree" child_match="all">
            <DataType value="vtkCellGrid" />
          </DataType>

        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <!-- End of CellGridRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="StructuredGridRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show structured grid as
      Surface/Outline/Points/Wireframe/Volume</Documentation>
      <!-- this adds to what is already defined in PVRepresentationBase -->
      <RepresentationType subproxy="VolumeRepresentation"
                          text="Volume" />
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkStructuredGrid" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="VolumeRepresentation"
               proxygroup="representations"
               proxyname="StructuredGridVolumeRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup label="Volume Rendering">
            <Property name="ScalarOpacityFunction" />
            <Property name="ScalarOpacityUnitDistance"
                      panel_visibility="advanced" />
            <Property name="SelectMapper"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="SamplingDimensions"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume"/>
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="Representation"
                                       value="Volume" />
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <!-- pqDisplayRepresentationWidget respects this hint to put out
             a warning for the user before switching to this type of Representation.
             The user can then accept or reject the change.
             BUG #15117
        -->
        <WarnOnRepresentationChange value="Volume" />
        <!-- pqDisplayColorWidget disables "Solid Color" for this representation type -->
        <NoSolidColor representation="Volume" />
      </Hints>
      <!-- End of StructuredGridRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="UniformGridRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show image data as
      Surface/Outline/Points/Wireframe/Volume/Slice.</Documentation>
      <!-- this adds to the types already defined in PVRepresentationBase -->
      <RepresentationType subproxy="VolumeRepresentation"
                          text="Volume" />
      <RepresentationType subproxy="SliceRepresentation"
                          text="Slice" />
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="VolumeRepresentation"
               proxygroup="representations"
               proxyname="UniformGridVolumeRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup label="Volume Rendering">
            <Property name="ScalarOpacityUnitDistance"
                      panel_visibility="advanced" />
            <Property name="ScalarOpacityFunction" />
            <Property name="TransferFunction2D" />
            <Property name="UseSeparateOpacityArray"
                      panel_visibility="advanced" />
            <Property name="OpacityArrayName"
                      panel_visibility="advanced" />
            <Property name="OpacityComponent"
                      panel_visibility="advanced" />
            <Property name="UseTransfer2D"
                      panel_visibility="advanced" />
            <Property name="UseGradientForTransfer2D"
                      panel_visibility="advanced" />
            <Property name="ColorArray2Name"
                      panel_visibility="advanced" />
            <Property name="ColorArray2Component"
                      panel_visibility="advanced" />
            <Property name="VolumeRenderingMode"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="Shade"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="GlobalIlluminationReach"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="VolumetricScatteringBlending"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="VolumeAnisotropy"
                      panel_visibility="advanced"/>
            <Property name="InterpolationType"
                      panel_visibility="never" />
            <Property name="BlendMode" />
            <Property name="IsosurfaceValues" />
            <Property name="SliceFunction" />
            <Property name="UseCropping" />
            <Hints>
              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="or">
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="Volume" />
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="NVIDIA IndeX" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>
          </PropertyGroup>
          <PropertyGroup label="Cropping Parameters" panel_widget="InteractiveBox">
            <Property function="Position" name="CroppingOrigin" />
            <Property function="Scale" name="CroppingScale" />
            <Property function="Input" name="DummyInput" />
            <Hints>
              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="and">
                  <Expression type="or">
                    <PropertyWidgetDecorator type="GenericDecorator"
                                             mode="visibility"
                                             property="Representation"
                                             value="Volume" />
                    <PropertyWidgetDecorator type="GenericDecorator"
                                             mode="visibility"
                                             property="Representation"
                                             value="NVIDIA IndeX" />
                  </Expression>
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="UseCropping"
                                           value="1" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
        <LinkProperties>
          <Property name="DummyInput" with_property="Input" />
        </LinkProperties>
      </SubProxy>
      <SubProxy>
        <Proxy name="SliceRepresentation"
               proxygroup="representations"
               proxyname="ImageSliceRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup label="Slicing">
            <Property name="SliceMode"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="slice" />
            <Property name="Slice"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="slice" />
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="Representation"
                                       value="Slice" />
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <!-- pqDisplayRepresentationWidget respects this hint to put out
             a warning for the user before switching to this type of Representation.
             The user can then accept or reject the change.
             BUG #15117
        -->
        <WarnOnRepresentationChange value="Volume" />
        <!-- pqDisplayColorWidget disables "Solid Color" for this representation type -->
        <NoSolidColor representation="Slice" />
        <NoSolidColor representation="Volume" />
      </Hints>
      <!-- End of UniformGridRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="RectilinearGridRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show image data as
      Surface/Outline/Points/Wireframe/Volume.</Documentation>
      <!-- this adds to the types already defined in PVRepresentationBase -->
      <RepresentationType subproxy="VolumeRepresentation"
                          text="Volume" />
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkRectilinearGrid" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="VolumeRepresentation"
               proxygroup="representations"
               proxyname="UniformGridVolumeRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup label="Volume Rendering">
            <Property name="ScalarOpacityUnitDistance"
                      panel_visibility="advanced" />
            <Property name="ScalarOpacityFunction" />
            <Property name="TransferFunction2D" />
            <Property name="UseSeparateOpacityArray"
                      panel_visibility="advanced" />
            <Property name="OpacityArrayName"
                      panel_visibility="advanced" />
            <Property name="OpacityComponent"
                      panel_visibility="advanced" />
            <Property name="UseTransfer2D"
                      panel_visibility="advanced" />
            <Property name="UseGradientForTransfer2D"
                      panel_visibility="advanced" />
            <Property name="ColorArray2Name"
                      panel_visibility="advanced" />
            <Property name="ColorArray2Component"
                      panel_visibility="advanced" />
            <Property name="VolumeRenderingMode"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="Shade"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="GlobalIlluminationReach"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="VolumetricScatteringBlending"
                      panel_visibility="advanced"
                      panel_visibility_default_for_representation="volume" />
            <Property name="VolumeAnisotropy"
                      panel_visibility="advanced"/>
            <Property name="InterpolationType"
                      panel_visibility="never" />
            <Property name="BlendMode" />
            <Property name="IsosurfaceValues" />
            <Property name="UseCropping" />
            <Hints>
              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="or">
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="Volume" />
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="Representation"
                                           value="NVIDIA IndeX" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>
          </PropertyGroup>
          <PropertyGroup label="Cropping Parameters" panel_widget="InteractiveBox">
            <Property function="Position" name="CroppingOrigin" />
            <Property function="Scale" name="CroppingScale" />
            <Property function="Input" name="DummyInput" />
            <Hints>
              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="and">
                  <Expression type="or">
                    <PropertyWidgetDecorator type="GenericDecorator"
                                             mode="visibility"
                                             property="Representation"
                                             value="Volume" />
                    <PropertyWidgetDecorator type="GenericDecorator"
                                             mode="visibility"
                                             property="Representation"
                                             value="NVIDIA IndeX" />
                  </Expression>
                  <PropertyWidgetDecorator type="GenericDecorator"
                                           mode="visibility"
                                           property="UseCropping"
                                           value="1" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
        <LinkProperties>
          <Property name="DummyInput" with_property="Input" />
        </LinkProperties>
      </SubProxy>
      <Hints>
        <!-- pqDisplayRepresentationWidget respects this hint to put out
             a warning for the user before switching to this type of Representation.
             The user can then accept or reject the change.
             BUG #15117
        -->
        <WarnOnRepresentationChange value="Volume" />
        <!-- pqDisplayColorWidget disables "Solid Color" for this representation type -->
        <NoSolidColor representation="Volume" />
      </Hints>
      <!-- End of RectilinearGridRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           class="vtkPVCompositeRepresentation"
                           name="AMRRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>This representation is used to show AMR data as
      Surface/Outline/Points/Wireframe/Volume.</Documentation>
      <!-- this adds to the types already defined in PVRepresentationBase -->
      <RepresentationType subproxy="VolumeRepresentation"
                          text="Volume" />
      <RepresentationType subproxy="AMROutlineRepresentation"
                          text="AMR Blocks" />
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkOverlappingAMR" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1"></InputArrayDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1"></InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="VolumeRepresentation"
               proxygroup="internal_representations"
               proxyname="AMRVolumeRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
        </ShareProperties>
        <ExposedProperties>
        <PropertyGroup label="Volume Rendering">
          <Property name="ScalarOpacityUnitDistance"
                    panel_visibility="advanced" />
          <Property name="ScalarOpacityFunction" />
          <Property name="VolumeRenderingMode" />
          <Property name="ResamplingMode" />
          <Property name="StreamingRequestSize" />
          <Property name="NumberOfSamples" />
          <Property name="Shade" />
          <Hints>
            <PropertyWidgetDecorator type="GenericDecorator"
                                     mode="visibility"
                                     property="Representation"
                                     value="Volume" />
          </Hints>
        </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

      <SubProxy>
        <Proxy name="AMROutlineRepresentation"
               proxygroup="internal_representations"
               proxyname="AMROutlineRepresentation" />
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
        </ShareProperties>
      </SubProxy>

      <Hints>
        <!-- pqDisplayRepresentationWidget respects this hint to put out
             a warning for the user before switching to this type of Representation.
             The user can then accept or reject the change.
             BUG #15117
        -->
        <WarnOnRepresentationChange value="Volume" />
        <!-- pqDisplayColorWidget disables "Solid Color" for this representation type -->
        <NoSolidColor representation="Volume" />
      </Hints>

      <!-- End of AMRRepresentation -->
    </PVRepresentationProxy>

    <!-- ================================================================== -->
    <PVRepresentationProxy class="vtkPVCompositeRepresentation"
                           name="HyperTreeGridRepresentation"
                           base_proxygroup="internal_representations"
                           base_proxyname="PVRepresentationBase"
                           processes="client|renderserver|dataserver">
      <Documentation>Representation to show Hyper Tree Grids in the render view
      based on the Composite Representation.</Documentation>

      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkHyperTreeGrid" />
          <DataType value="vtkDataObjectTree" child_match="all">
            <DataType value="vtkHyperTreeGrid" />
          </DataType>
        </DataTypeDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>

    </PVRepresentationProxy>

    <PVRepresentationProxy class="vtkHyperTreeGridRepresentation"
                           name="FastHyperTreeGridRepresentation"
                           processes="client|renderserver|dataserver"
                           si_class="vtkSIProxy">
      <Documentation>Dedicated representation to show 2D Hyper Tree Grid.
        Use an adaptive decimation mechanism for improved performances.
      </Documentation>

      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkHyperTreeGrid" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1">
        </InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>

      <IntVectorProperty command="SetAdaptiveDecimation"
                         default_values="1"
                         name="AdaptiveDecimation"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Enable the use of the Adaptive decimation to only map the part
          of the HTG inside the camera frustum. Only support 2D HTG with
          parallel prokjection.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="CompositeDecorator">
            <Expression type="or">
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="Representation"
                                       value="HTG Surface" />
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="Representation"
                                       value="HTG Surface With Edges" />
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="Representation"
                                       value="HTG Wireframe" />
            </Expression>
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>

      <StringVectorProperty name="BlockSelectors"
                            command="AddBlockSelector"
                            clean_command="RemoveAllBlockSelectors"
                            repeat_command="1"
                            number_of_elements_per_command="1"
                            panel_visibility="multiblock_inspector"
                            number_of_elements="1"
                            default_values="/">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Documentation>
          For composite datasets, specify selectors to limit the view
          to a chosen subset of blocks.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty command="SetRepresentation"
                         default_values="1"
                         name="Representation"
                         panel_widget="display_representation_selector"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Wireframe"
                 value="1" />
          <Entry text="Surface"
                 value="2" />
          <Entry text="Surface With Edges"
                 value="3" />
        </EnumerationDomain>
      </IntVectorProperty>

      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>

      <!-- Coloring -->

      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to True, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup-table to use to map data array to colors.
        Lookuptable is only used with MapScalars to ON.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty default_values="0"
                         name="UseSeparateColorMap"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>By default, ParaView shares a single color map among all datasets colored
        by arrays that have the same name. When this option is enabled, the active dataset will
        be assigned a separate color map not shared by other datasets.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetDiffuseColor"
                            default_values="1.0 1.0 1.0"
                            name="DiffuseColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SurfaceColor" unlink_if_modified="1" />
        </Hints>
        <Documentation>
          The solid color of the model.
        </Documentation>
      </DoubleVectorProperty>

      <!-- Edges parameters -->

      <DoubleVectorProperty command="SetEdgeColor"
                            default_values="0 0 0.5"
                            name="EdgeColor"
                            panel_widget="color_selector_with_palette"
                            number_of_elements="3">
        <Documentation>Set the edge color. This color is used to draw the edge
        for the hyper tree grid data when EdgeVisibility is on.</Documentation>
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="EdgeColor" unlink_if_modified="1" />
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Representation"
                                   value="3" />
        </Hints>
      </DoubleVectorProperty>

      <!-- Position -->

      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            label="Translation"
                            name="Position"
                            panel_visibility="advanced"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            panel_visibility="advanced"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            panel_visibility="advanced"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <!-- UI -->

    </PVRepresentationProxy>

    <Extension name="HyperTreeGridRepresentation">
      <Documentation>
        Extends standard HTG Representation by adding
        Fast2DHyperTreeGridRepresentation as a new type of representation.
      </Documentation>

      <RepresentationType subproxy="FastHyperTreeGridRepresentation"
        text="HTG Surface" subtype="Surface"/>
      <RepresentationType subproxy="FastHyperTreeGridRepresentation"
        text="HTG Surface With Edges" subtype="Surface With Edges"/>
      <RepresentationType subproxy="FastHyperTreeGridRepresentation"
        text="HTG Wireframe" subtype="Wireframe"/>

      <SubProxy>
        <Proxy name="FastHyperTreeGridRepresentation"
               proxygroup="representations"
               proxyname="FastHyperTreeGridRepresentation">
        </Proxy>
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
        </ShareProperties>
        <ExposedProperties>
          <PropertyGroup panel_visibility="default"
                         label="HTG Rendering" >
            <Property name="AdaptiveDecimation" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
    </Extension>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkStructuredGridVolumeRepresentation"
                         name="StructuredGridVolumeRepresentation"
                         processes="client|renderserver|dataserver"
                         si_class="vtkSIUnstructuredGridVolumeRepresentationProxy"
                         base_proxygroup="representations"
                         base_proxyname="UnstructuredGridVolumeRepresentation">
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkImageVolumeRepresentation"
                         name="UniformGridVolumeRepresentation"
                         processes="client|renderserver|dataserver"
                         si_class="vtkSIProxy">
      <Documentation>Representation for rendering a vtkImageData as
      volume.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="any"
                          name="input_array_any">
        </InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseTransfer2D"
                         default_values="0"
                         name="UseTransfer2D"
                         label="Use 2D Transfer Function"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, a 2D transfer function will be used for volume rendering instead
          of two 1D piecewise functions.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseGradientForTransfer2D"
                         default_values="1"
                         name="UseGradientForTransfer2D"
                         label="Use Gradient as Y-Axis Array"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, the gradient of the input scalar array will be used for the Y
          axis of the 2D transfer function.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <StringVectorProperty name="ColorArray2Name"
                            command="SelectColorArray2"
                            number_of_elements="5"
                            element_types="0 0 0 0 2"
                            label="2D Transfer Function Y-Axis Array"
                            panel_visibility="advanced">
        <ArrayListDomain name="array_list"
          input_domain_name="input_point_array">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          Set the second array to color with. This would be used when a 2D transfer function is
          enabled and if the use_gradient property is set to false.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean" />
          </PropertyWidgetDecorator>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseGradientForTransfer2D" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SelectColorArray2Component"
                         default_values="0"
                         name="ColorArray2Component"
                         label="2D Transfer Function Y-Axis Array Component"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="0">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="ColorArray2Name" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>
          This property indicates the component of the array to be used for Y-axis of the volume 2D
          transfer function.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean" />
          </PropertyWidgetDecorator>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseGradientForTransfer2D" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseSeparateOpacityArray"
                         default_values="0"
                         name="UseSeparateOpacityArray"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, the Opacity Array will be used to determine the
          point gaussian sprites.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <StringVectorProperty name="OpacityArrayName"
                            command="SelectOpacityArray"
                            number_of_elements="5"
                            element_types="0 0 0 0 2"
                            label="Volume Opacity Array"
                            panel_visibility="advanced">
        <ArrayListDomain name="array_list"
          input_domain_name="input_point_array">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          This property specifies the name of the input array to map to opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseSeparateOpacityArray" function="boolean" />
          </PropertyWidgetDecorator>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SelectOpacityArrayComponent"
                         default_values="0"
                         name="OpacityComponent"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="OpacityArrayName" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>
          This property indicates the component of the array to be used for opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseSeparateOpacityArray" function="boolean" />
          </PropertyWidgetDecorator>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseTransfer2D" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetPickable"
                         default_values="1"
                         name="Pickable"
                         number_of_elements="1">
        <Hints>
          <NoDefault />
        </Hints>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetInterpolationType"
                         default_values="2"
                         name="InterpolationType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Nearest"
                 value="0" />
          <Entry text="Linear"
                 value="1" />
          <Entry text="Cubic"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <ProxyProperty command="SetColor"
                     name="LookupTable" >
        <ProxyGroupDomain name="groups">
          <Group name="transfer_functions" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <DoubleVectorProperty command="SetAmbient"
                            default_values="0.0"
                            name="Ambient"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDiffuse"
                            default_values="1.0"
                            name="Diffuse"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecular"
                            default_values="0.0"
                            name="Specular"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecularPower"
                            default_values="100.0"
                            name="SpecularPower"
                            number_of_elements="1">
        <DoubleRangeDomain max="100"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetShade"
                         default_values="0"
                         name="Shade"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Enable/Disable shading.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetGlobalIlluminationReach"
            default_values="0.0"
            name="GlobalIlluminationReach"
            number_of_elements="1">
        <DoubleRangeDomain max="1.0"
          min="0.0"
          name="range" />
        <Documentation>
          This parameter acts as a balance between localness and globalness of shadows.
          A higher value results in more accurate, but also slower renders.
          A slower value results in faster renders, but only produces ambiant occlusion.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                      mode="visibility"
                      property="Shade"
                      value="1"
                      inverse="0" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetVolumetricScatteringBlending"
            default_values="0.0"
            name="VolumetricScatteringBlending"
            number_of_elements="1">
        <DoubleRangeDomain max="2.0"
          min="0.0"
          name="range" />
        <Documentation>
          This parameter controls the blending between surfacic approximation
          and volumetric multi-scattering.
          A value of 0.0 means that no scattered rays will be cast, no volumetric shadows.
          A value of 1.0 means that the shader will smartly blend between the two models.
          A value of 2.0 means that the shader only uses the volumetric scattering model.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                      mode="visibility"
                      property="Shade"
                      value="1"
                      inverse="0" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetAnisotropy"
            default_values="0.0"
            name="VolumeAnisotropy"
            number_of_elements="1"
            panel_visibility="advanced">
        <DoubleRangeDomain max="1.0"
          min="-1.0"
          name="range" />
        <Documentation>
          Set the volume's anisotropy, according to the Henyey-Greenstein model.
          Describes whether the model is rather backwards-scattering (-1.0) or forwards-scattering (1.0).
          An isotropic volume has a null anisotropy.
        </Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When enabled, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMultiComponentsMapping"
                         default_values="0"
                         name="MultiComponentsMapping"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Hints>
          <PropertyWidgetDecorator type="MultiComponentsDecorator"
                                   components="2 4" />
        </Hints>
      </IntVectorProperty>
      <ProxyProperty command="SetScalarOpacity"
                     name="ScalarOpacityFunction">
        <ProxyGroupDomain name="groups">
          <Group name="piecewise_functions" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <ProxyProperty command="SetTransferFunction2D"
                     name="TransferFunction2D" >
        <ProxyGroupDomain name="groups">
          <Group name="transfer_2d_functions" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty command="SetRequestedRenderMode"
                         default_values="0"
                         name="VolumeRenderingMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Smart" value="0" />
          <Entry text="Ray Cast Only" value="1" />
          <Entry text="GPU Based" value="2" />
          <Entry text="OSPRay Based" value="3" />
        </EnumerationDomain>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetScalarOpacityUnitDistance"
                            default_values="1"
                            name="ScalarOpacityUnitDistance"
                            number_of_elements="1">
        <BoundsDomain mode="approximate_cell_length"
                      name="bounds" >
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </BoundsDomain>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="BlendMode"
                                   value="6"
                                   inverse="1" />
        </Hints>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetBlendMode"
                         default_values="0"
                         name="BlendMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <!-- See vtkVolumeMapper::BlendModes -->
          <Entry text="Composite"
                 value="0" />
          <Entry text="Isosurface"
                 value="5" />
          <Entry text="Slice"
                 value="6" />
        </EnumerationDomain>
        <Documentation>This property specifies how the samples should be blended</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetIsosurfaceValue"
                            label="Isosurfaces"
                            name="IsosurfaceValues"
                            number_of_elements="0"
                            number_of_elements_per_command="1"
                            repeat_command="1"
                            set_number_command="SetNumberOfIsosurfaces"
                            use_index="1">
        <ArrayRangeDomain name="scalar_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="ColorArrayName" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <Documentation>This property specifies the values at which to display
        isosurfaces and also the number of such values.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="BlendMode"
                                   value="5" />
          <!-- enable this widget when BlendMode==Isosurface -->
        </Hints>
      </DoubleVectorProperty>
      <ProxyProperty command="SetSliceFunction"
                     label="Slice Type"
                     name="SliceFunction">
        <ProxyGroupDomain name="groups">
          <Group name="implicit_functions" />
        </ProxyGroupDomain>
        <ProxyListDomain name="proxy_list">
          <Proxy group="implicit_functions"
                 name="Plane" />
        </ProxyListDomain>
        <Documentation>This property sets the parameters of the slice
        function.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="BlendMode"
                                   value="6" />
          <!-- enable this widget when BlendMode==Slice -->
        </Hints>
      </ProxyProperty>
      <IntVectorProperty command="SetCropping"
                         default_values="0"
                         name="UseCropping"
                         number_of_elements="1">
        <BooleanDomain name="bool"/>
        <Documentation>This property specifies if the cropping is enabled.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetCroppingOrigin"
                            name="CroppingOrigin"
                            number_of_elements="3"
                            argument_is_array="1"
                            default_values="0 0 0">
        <Documentation>This property specifies the cropping origin.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetCroppingScale"
                            name="CroppingScale"
                            number_of_elements="3"
                            argument_is_array="1"
                            default_values="1 1 1">
        <Documentation>This property specifies the cropping scale.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCoordinateSystem"
                         default_values="0"
                         name="CoordinateSystem"
                         number_of_elements="1">
        <Documentation>Specify the coordinate system that this prop is relative to. This defaults
          to world but can be set to physical.  Representations in the PHYSICAL coordinate
          system are automatically transformed by the PhysicalToWorldMatrix.  In HMD-based
          displays, this has the effect of fixing the object with respect to the display.  In
          general, the PhysicalToWorldMatrix does not necessarily correspond to the coordinate
          system of the display, but can be used for similar purposes.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Navigable"
                 value="0" />
          <Entry text="Fixed"
                 value="1" />
        </EnumerationDomain>
      </IntVectorProperty>
      <InputProperty is_internal="1" name="DummyInput" />
      <Hints>
        <ProxyList>
          <Link name="DummyInput"
                with_property="Input" />
        </ProxyList>
      </Hints>

      <!-- end of UniformGridVolumeRepresentation -->
    </RepresentationProxy>

    <!--======================================================================-->
    <RepresentationProxy name="SurfaceLICRepresentation"
      class="vtkSurfaceLICRepresentation"
      processes="client|dataserver|renderserver"
      base_proxygroup="representations"
      base_proxyname="SurfaceRepresentation">
      <Documentation>
        Representation proxy for Surface LIC.
      </Documentation>

      <StringVectorProperty name="SelectInputVectors"
        command="SelectInputVectors"
        number_of_elements="5"
        element_types="0 0 0 0 2"
        label="Vectors">
        <ArrayListDomain name="array_list" attribute_type="Vectors"
          input_domain_name="input_array_point_3">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          This property specifies the name of the input vector array to process.
        </Documentation>
      </StringVectorProperty>

      <!--
      Integrator controls
      -->
      <IntVectorProperty name="NumberOfSteps"
        command="SetNumberOfSteps"
        number_of_elements="1"
        default_values="40">
        <IntRangeDomain name="range" min="1" />
      </IntVectorProperty>

      <DoubleVectorProperty name="StepSize"
        command="SetStepSize"
        number_of_elements="1"
        default_values="0.25">
        <DoubleRangeDomain name="range" min="0.0"/>
      </DoubleVectorProperty>

      <IntVectorProperty name="NormalizeVectors"
        command="SetNormalizeVectors"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <IntVectorProperty name="EnhancedLIC"
        command="SetEnhancedLIC"
        label="Enhanced/2-Pass Image LIC"
        number_of_elements="1"
        default_values="1"
        >
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <!--
      Coloring controls
      -->
      <IntVectorProperty name="ColorMode"
        command="SetColorMode"
        number_of_elements="1"
        default_values="0"
        >
        <EnumerationDomain name="enum">
          <Entry text="Blend"    value="0" />
          <Entry text="Multiply" value="1" />
        </EnumerationDomain>
      </IntVectorProperty>

      <DoubleVectorProperty name="MapModeBias"
        command="SetMapModeBias"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="-0.25" max="0.25" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="LICIntensity"
        label="LIC Intensity"
        command="SetLICIntensity"
        number_of_elements="1"
        default_values="0.8"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0" />
      </DoubleVectorProperty>

      <IntVectorProperty name="EnhanceContrast"
        command="SetEnhanceContrast"
        number_of_elements="1"
        default_values="0"
        >
        <EnumerationDomain name="enum">
          <Entry text="Off"           value="0" />
          <Entry text="LIC Only"      value="1" />
          <Entry text="LIC and Color" value="4" />
          <Entry text="Color Only"    value="3" />
        </EnumerationDomain>
      </IntVectorProperty>

      <DoubleVectorProperty name="LowLICContrastEnhancementFactor"
        command="SetLowLICContrastEnhancementFactor"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="0.5" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="HighLICContrastEnhancementFactor"
        command="SetHighLICContrastEnhancementFactor"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="0.5" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="LowColorContrastEnhancementFactor"
        command="SetLowColorContrastEnhancementFactor"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="0.5" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="HighColorContrastEnhancementFactor"
        command="SetHighColorContrastEnhancementFactor"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="0.5" />
      </DoubleVectorProperty>

      <IntVectorProperty name="AntiAlias"
        command="SetAntiAlias"
        number_of_elements="1"
        default_values="0"
        panel_visibility="advanced"
        >
        <IntRangeDomain name="range" min="0" max="5" />
      </IntVectorProperty>

      <!--
      Fragment masking Control
      -->
      <IntVectorProperty name="MaskOnSurface"
        command="SetMaskOnSurface"
        number_of_elements="1"
        default_values="1"
        panel_visibility="advanced"
        >
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <DoubleVectorProperty name="MaskThreshold"
        command="SetMaskThreshold"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="MaskColor"
        command="SetMaskColor"
        number_of_elements="3"
        default_values="0.5 0.5 0.5"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0 0 0" max="1 1 1"/>
      </DoubleVectorProperty>

      <DoubleVectorProperty name="MaskIntensity"
        command="SetMaskIntensity"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0"/>
      </DoubleVectorProperty>

      <!--
      Noise Texture Generator Controls
      -->
      <IntVectorProperty name="GenerateNoiseTexture"
        command="SetGenerateNoiseTexture"
        number_of_elements="1"
        default_values="0"
        panel_visibility="advanced"
        >
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <IntVectorProperty name="NoiseType"
        command="SetNoiseType"
        number_of_elements="1"
        default_values="1"
        panel_visibility="advanced"
        >
        <EnumerationDomain name="enum">
          <Entry text="uniform"  value="0" />
          <Entry text="Gaussian" value="1" />
          <Entry text="Perlin"   value="2" />
        </EnumerationDomain>
      </IntVectorProperty>

      <IntVectorProperty name="NoiseTextureSize"
        command="SetNoiseTextureSize"
        number_of_elements="1"
        default_values="128"
        panel_visibility="advanced"
        >
        <IntRangeDomain name="range" min="2" max="4096" />
      </IntVectorProperty>

      <IntVectorProperty name="NoiseGrainSize"
        command="SetNoiseGrainSize"
        number_of_elements="1"
        default_values="2"
        panel_visibility="advanced"
        >
        <IntRangeDomain name="range" min="1" max="4096" />
      </IntVectorProperty>

      <DoubleVectorProperty name="MinNoiseValue"
        command="SetMinNoiseValue"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0"/>
      </DoubleVectorProperty>

      <DoubleVectorProperty name="MaxNoiseValue"
        command="SetMaxNoiseValue"
        number_of_elements="1"
        default_values="0.8"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0"/>
      </DoubleVectorProperty>

      <IntVectorProperty name="NumberOfNoiseLevels"
        command="SetNumberOfNoiseLevels"
        number_of_elements="1"
        default_values="1024"
        panel_visibility="advanced"
        >
        <IntRangeDomain name="range" min="1" max="1024" />
      </IntVectorProperty>

      <DoubleVectorProperty name="ImpulseNoiseProbability"
        label="Impulse Probability"
        command="SetImpulseNoiseProbability"
        number_of_elements="1"
        default_values="1.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0" />
      </DoubleVectorProperty>

      <DoubleVectorProperty name="ImpulseNoiseBackgroundValue"
        label="Impulse BackgroundValue"
        command="SetImpulseNoiseBackgroundValue"
        number_of_elements="1"
        default_values="0.0"
        panel_visibility="advanced"
        >
        <DoubleRangeDomain name="range" min="0.0" max="1.0" />
      </DoubleVectorProperty>

      <IntVectorProperty name="NoiseGeneratorSeed"
        label="RNG Seed"
        command="SetNoiseGeneratorSeed"
        number_of_elements="1"
        default_values="1"
        panel_visibility="advanced"
        >
        <IntRangeDomain name="range" min="1" max="1073741823" />
      </IntVectorProperty>

      <!--
      Parallel performance
      -->
      <IntVectorProperty name="CompositeStrategy"
        command="SetCompositeStrategy"
        number_of_elements="1"
        default_values="3"
        panel_visibility="advanced"
        >
        <EnumerationDomain name="enum">
          <Entry text="INPLACE"          value="0" />
          <Entry text="INPLACE DISJOINT" value="1" />
          <Entry text="BALANCED"         value="2" />
          <Entry text="AUTO"             value="3" />
        </EnumerationDomain>
      </IntVectorProperty>

      <!--
      Interactive performance.
      -->
      <IntVectorProperty name="UseLICForLOD"
        label="Use LIC for LOD"
        command="SetUseLICForLOD"
        number_of_elements="1"
        default_values="0"
        panel_visibility="advanced"
        >
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <!--
      for benchmarking
      setting the file name will trigger the write.
      -->
      <StringVectorProperty name="WriteLog"
        command="WriteTimerLog"
        number_of_elements="1"
        default_values=""
        label="Log File"
        panel_visibility="advanced">
        <Documentation>
         when compiled for benchmarking
         setting the file name will trigger
         a write of the parallel timer log
        </Documentation>
      </StringVectorProperty>
      <!-- end of SurfaceLICRepresentation -->
    </RepresentationProxy>

    <!--======================================================================-->
    <Extension name="GeometryRepresentation">
      <RepresentationType subproxy="SurfaceLICRepresentation"
        subtype="Surface" text="Surface LIC" />

      <SubProxy>
        <Proxy name="SurfaceLICRepresentation"
          proxygroup="representations" proxyname="SurfaceLICRepresentation" />

        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>

        <ExposedProperties>
        <!--<PropertyGroup label="Surface LIC Parameters">-->
         <!-- Integrator -->
         <PropertyGroup label="SurfaceLIC: Integrator">
           <Property name="SelectInputVectors"/>
           <Property name="NumberOfSteps"/>
           <Property name="StepSize" />
           <Property name="NormalizeVectors" />
           <Property name="EnhancedLIC" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Rendering controls -->
         <PropertyGroup label="SurfaceLIC: Rendering">
           <Property name="ColorMode" />
           <Property name="LICIntensity" />
           <Property name="MapModeBias" />

           <Property name="EnhanceContrast" />
           <Property name="LowLICContrastEnhancementFactor" />
           <Property name="HighLICContrastEnhancementFactor" />
           <Property name="LowColorContrastEnhancementFactor" />
           <Property name="HighColorContrastEnhancementFactor" />

           <Property name="AntiAlias" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Fragment Masking -->
         <PropertyGroup label="SurfaceLIC: Fragment masking">
           <Property name="MaskOnSurface" />
           <Property name="MaskThreshold" />
           <Property name="MaskIntensity" />
           <Property name="MaskColor" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Noise texture controls -->
         <PropertyGroup label="SurfaceLIC: Noise texture generator">
           <Property name="GenerateNoiseTexture" />
           <Property name="NoiseType" />
           <Property name="NoiseTextureSize" />
           <Property name="NoiseGrainSize" />
           <Property name="MinNoiseValue" />
           <Property name="MaxNoiseValue" />
           <Property name="NumberOfNoiseLevels" />
           <Property name="ImpulseNoiseProbability" />
           <Property name="ImpulseNoiseBackgroundValue" />
           <Property name="NoiseGeneratorSeed" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Parallel  controls -->
         <PropertyGroup label="SurfaceLIC: Parallelization">
           <Property name="CompositeStrategy" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Interactivity controls -->
         <PropertyGroup label="SurfaceLIC: Interactivity">
           <Property name="UseLICForLOD" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- benchmarking -->
         <PropertyGroup label="SurfaceLIC: Benchmark">
           <Property name="WriteLog" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>
        <!-- </PropertyGroup> -->
        </ExposedProperties>

      </SubProxy>
    </Extension>

    <!--======================================================================-->
    <Extension name="UnstructuredGridRepresentation">
      <RepresentationType subproxy="SurfaceLICRepresentation"
        subtype="Surface" text="Surface LIC" />

      <SubProxy>
        <Proxy name="SurfaceLICRepresentation"
          proxygroup="representations" proxyname="SurfaceLICRepresentation" />

        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>

        <ExposedProperties>
        <!--<PropertyGroup label="Surface LIC Parameters">-->
         <!-- Integrator -->
         <PropertyGroup label="SurfaceLIC: Integrator">
           <Property name="SelectInputVectors"/>
           <Property name="NumberOfSteps"/>
           <Property name="StepSize" />
           <Property name="NormalizeVectors" />
           <Property name="EnhancedLIC" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Rendering controls -->
         <PropertyGroup label="SurfaceLIC: Rendering">
           <Property name="ColorMode" />
           <Property name="LICIntensity" />
           <Property name="MapModeBias" />

           <Property name="EnhanceContrast" />
           <Property name="LowLICContrastEnhancementFactor" />
           <Property name="HighLICContrastEnhancementFactor" />
           <Property name="LowColorContrastEnhancementFactor" />
           <Property name="HighColorContrastEnhancementFactor" />

           <Property name="AntiAlias" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Fragment Masking -->
         <PropertyGroup label="SurfaceLIC: Fragment masking">
           <Property name="MaskOnSurface" />
           <Property name="MaskThreshold" />
           <Property name="MaskIntensity" />
           <Property name="MaskColor" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Noise texture controls -->
         <PropertyGroup label="SurfaceLIC: Noise texture generator">
           <Property name="GenerateNoiseTexture" />
           <Property name="NoiseType" />
           <Property name="NoiseTextureSize" />
           <Property name="NoiseGrainSize" />
           <Property name="MinNoiseValue" />
           <Property name="MaxNoiseValue" />
           <Property name="NumberOfNoiseLevels" />
           <Property name="ImpulseNoiseProbability" />
           <Property name="ImpulseNoiseBackgroundValue" />
           <Property name="NoiseGeneratorSeed" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Parallel  controls -->
         <PropertyGroup label="SurfaceLIC: Parallelization">
           <Property name="CompositeStrategy" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Interactivity controls -->
         <PropertyGroup label="SurfaceLIC: Interactivity">
           <Property name="UseLICForLOD" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- benchmarking -->
         <PropertyGroup label="SurfaceLIC: Benchmark">
           <Property name="WriteLog" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>
        <!-- </PropertyGroup> -->
        </ExposedProperties>

      </SubProxy>
    </Extension>

    <!--======================================================================-->
    <Extension name="UniformGridRepresentation">
      <RepresentationType subproxy="SurfaceLICRepresentation"
        subtype="Surface" text="Surface LIC" />
      <SubProxy>
        <Proxy name="SurfaceLICRepresentation"
          proxygroup="representations" proxyname="SurfaceLICRepresentation" />

        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>

        <ExposedProperties>
        <!--<PropertyGroup label="Surface LIC Parameters">-->
         <!-- Integrator -->
         <PropertyGroup label="SurfaceLIC: Integrator">
           <Property name="SelectInputVectors"/>
           <Property name="NumberOfSteps"/>
           <Property name="StepSize" />
           <Property name="NormalizeVectors" />
           <Property name="EnhancedLIC" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Rendering controls -->
         <PropertyGroup label="SurfaceLIC: Rendering">
           <Property name="ColorMode" />
           <Property name="LICIntensity" />
           <Property name="MapModeBias" />

           <Property name="EnhanceContrast" />
           <Property name="LowLICContrastEnhancementFactor" />
           <Property name="HighLICContrastEnhancementFactor" />
           <Property name="LowColorContrastEnhancementFactor" />
           <Property name="HighColorContrastEnhancementFactor" />

           <Property name="AntiAlias" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Fragment Masking -->
         <PropertyGroup label="SurfaceLIC: Fragment masking">
           <Property name="MaskOnSurface" />
           <Property name="MaskThreshold" />
           <Property name="MaskIntensity" />
           <Property name="MaskColor" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Noise texture controls -->
         <PropertyGroup label="SurfaceLIC: Noise texture generator">
           <Property name="GenerateNoiseTexture" />
           <Property name="NoiseType" />
           <Property name="NoiseTextureSize" />
           <Property name="NoiseGrainSize" />
           <Property name="MinNoiseValue" />
           <Property name="MaxNoiseValue" />
           <Property name="NumberOfNoiseLevels" />
           <Property name="ImpulseNoiseProbability" />
           <Property name="ImpulseNoiseBackgroundValue" />
           <Property name="NoiseGeneratorSeed" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Parallel  controls -->
         <PropertyGroup label="SurfaceLIC: Parallelization">
           <Property name="CompositeStrategy" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Interactivity controls -->
         <PropertyGroup label="SurfaceLIC: Interactivity">
           <Property name="UseLICForLOD" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- benchmarking -->
         <PropertyGroup label="SurfaceLIC: Benchmark">
           <Property name="WriteLog" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>
        <!-- </PropertyGroup> -->
        </ExposedProperties>

      </SubProxy>
    </Extension>

    <!--======================================================================-->
    <Extension name="StructuredGridRepresentation">
      <RepresentationType subproxy="SurfaceLICRepresentation"
        subtype="Surface" text="Surface LIC" />
      <SubProxy>
        <Proxy name="SurfaceLICRepresentation"
          proxygroup="representations" proxyname="SurfaceLICRepresentation" />

        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>

        <ExposedProperties>
        <!--<PropertyGroup label="Surface LIC Parameters">-->
         <!-- Integrator -->
         <PropertyGroup label="SurfaceLIC: Integrator">
           <Property name="SelectInputVectors"/>
           <Property name="NumberOfSteps"/>
           <Property name="StepSize" />
           <Property name="NormalizeVectors" />
           <Property name="EnhancedLIC" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Rendering controls -->
         <PropertyGroup label="SurfaceLIC: Rendering">
           <Property name="ColorMode" />
           <Property name="LICIntensity" />
           <Property name="MapModeBias" />

           <Property name="EnhanceContrast" />
           <Property name="LowLICContrastEnhancementFactor" />
           <Property name="HighLICContrastEnhancementFactor" />
           <Property name="LowColorContrastEnhancementFactor" />
           <Property name="HighColorContrastEnhancementFactor" />

           <Property name="AntiAlias" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Fragment Masking -->
         <PropertyGroup label="SurfaceLIC: Fragment masking">
           <Property name="MaskOnSurface" />
           <Property name="MaskThreshold" />
           <Property name="MaskIntensity" />
           <Property name="MaskColor" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Noise texture controls -->
         <PropertyGroup label="SurfaceLIC: Noise texture generator">
           <Property name="GenerateNoiseTexture" />
           <Property name="NoiseType" />
           <Property name="NoiseTextureSize" />
           <Property name="NoiseGrainSize" />
           <Property name="MinNoiseValue" />
           <Property name="MaxNoiseValue" />
           <Property name="NumberOfNoiseLevels" />
           <Property name="ImpulseNoiseProbability" />
           <Property name="ImpulseNoiseBackgroundValue" />
           <Property name="NoiseGeneratorSeed" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Parallel  controls -->
         <PropertyGroup label="SurfaceLIC: Parallelization">
           <Property name="CompositeStrategy" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- Interactivity controls -->
         <PropertyGroup label="SurfaceLIC: Interactivity">
           <Property name="UseLICForLOD" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>

         <!-- benchmarking -->
         <PropertyGroup label="SurfaceLIC: Benchmark">
           <Property name="WriteLog" />
           <Hints>
             <PropertyWidgetDecorator type="GenericDecorator"
                                      mode="visibility"
                                      property="Representation"
                                      value="Surface LIC" />
           </Hints>
         </PropertyGroup>
        <!-- </PropertyGroup> -->
        </ExposedProperties>

      </SubProxy>
    </Extension>



    <!-- ================================================================== -->
    <RepresentationProxy class="vtkOutlineRepresentation"
                         name="OutlineRepresentation"
                         processes="client|renderserver|dataserver"
                         base_proxygroup="representations"
                         base_proxyname="SurfaceRepresentation" >
      <Documentation>
        Representation for showing an outline for any dataset.
      </Documentation>
      <!-- end of OutlineRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkFeatureEdgesRepresentation"
                         name="FeatureEdgesRepresentation"
                         processes="client|renderserver|dataserver"
                         base_proxygroup="representations"
                         base_proxyname="SurfaceRepresentation" >
      <Documentation>
        Representation for showing feature edges for any dataset.
      </Documentation>
      <!-- end of OutlineRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy base_proxyname="PVRepresentationBase"
                         name="PointGaussianRepresentation"
                         class="vtkPointGaussianRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkDataSet"/>
        </DataTypeDomain>
        <InputArrayDomain attribute_type="point"
                          name="input_point_array"
                          optional="1">
        </InputArrayDomain>
      </InputProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to True, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup-table to use to map data array to colors.
        Lookuptable is only used with MapScalars to ON.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <DoubleVectorProperty command="SetSplatSize"
                            default_values="0.0"
                            name="GaussianRadius"
                            label="Gaussian Radius"
                            number_of_elements="1">
        <BoundsDomain name="range" mode="scaled_extent" scale_factor="0.005">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </BoundsDomain>
        <Documentation>
          The radius of the gaussian blur for each point.
        </Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SelectShaderPreset"
                         default_values="1"
                         name="ShaderPreset"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Gaussian Blur"
                 value="0" />
          <Entry text="Sphere"
                 value="1" />
          <Entry text="Black-edged circle"
                 value="2" />
          <Entry text="Plain circle"
                 value="3" />
          <Entry text="Triangle"
                 value="4" />
          <Entry text="Square Outline"
                 value="5" />
          <Entry text="Custom"
                 value="6" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetCustomTriangleScale"
                         default_values="3"
                         name="CustomTriangleScale"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>
          Sets the scale of the triangle geometry drawn, automatically
          set when using preset but needed with custom shader code
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="ShaderPreset"
                                   value="6" />
          <!-- show this widget when using CustomShader -->
        </Hints>
      </IntVectorProperty>
      <StringVectorProperty command="SetCustomShader"
                            default_values="
// This custom shader code define a gaussian blur&#xa;
// Please take a look into vtkSMPointGaussianRepresentation.cxx&#xa;
// for other custom shader examples&#xa;
//VTK::Color::Impl&#xa;
  float dist2 = dot(offsetVCVSOutput.xy,offsetVCVSOutput.xy);&#xa;
  float gaussian = exp(-0.5*dist2);&#xa;
  opacity = opacity*gaussian;&#xa;"
                            label="Custom Shader Code"
                            name="CustomShader"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>
          Sets the custom shader code
        </Documentation>
        <Hints>
          <Widget type="multi_line" />
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="ShaderPreset"
                                   value="6" />
          <!-- show this widget when using CustomShader -->
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty command="SetEmissive"
                         default_values="0"
                         name="Emissive"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          Should the splat be emissive like a light source or not. For cosmology emissive should be on. For scanned point clouds typically it would be off.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetScaleByArray"
                         default_values="0"
                         name="ScaleByArray"
                         number_of_elements="1"
                         label="Use Scale Array"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, the Scale Array will be used to determine that radii
          of the gaussians.  Otherwise the Default Radius will be used.
        </Documentation>
      </IntVectorProperty>
      <StringVectorProperty name="SetScaleArray"
                            command="SelectScaleArray"
                            number_of_elements="5"
                            element_types="0 0 0 0 2"
                            label="Gaussian Scale Array"
                            panel_visibility="advanced">
        <ArrayListDomain name="array_list"
          input_domain_name="input_point_array">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          This property specifies the name of the input array to scale the splats by.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="ScaleByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SelectScaleArrayComponent"
                         default_values="0"
                         name="ScaleArrayComponent"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SetScaleArray" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>
          This property indicates the component of the array to be used for scaling.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="ScaleByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseScaleFunction"
                         default_values="1"
                         name="UseScaleFunction"
                         number_of_elements="1"
                         label="Use Scale Transfer Function"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is enabled, the Scale Transfer Function is used to map
          the scale values of the Scale Array. Otherwise, the scale values are used as-is.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="ScaleByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <ProxyProperty command="SetScaleTransferFunction"
                     name="ScaleTransferFunction"
                     panel_visibility="advanced"
                     panel_widget="transfer_function_editor" >
        <Documentation>Set the piecewise function used to map data array to sprite size.
        ScaleTransferFunction is only used if ScaleByArray is set.</Documentation>
        <RangedTransferFunctionDomain name="proxy_list">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ArraySelection" name="SetScaleArray" />
            <Property function="ComponentSelection" name="ScaleArrayComponent" />
          </RequiredProperties>
        </RangedTransferFunctionDomain>
        <Hints>
          <PropertyWidgetDecorator type="CompositeDecorator">
            <Expression type="and">
              <PropertyWidgetDecorator type="ShowWidgetDecorator">
                <Property name="ScaleByArray" function="boolean" />
              </PropertyWidgetDecorator>
              <PropertyWidgetDecorator type="ShowWidgetDecorator">
                <Property name="UseScaleFunction" function="boolean" />
              </PropertyWidgetDecorator>
            </Expression>
          </PropertyWidgetDecorator>
        </Hints>
      </ProxyProperty>
      <IntVectorProperty command="SetOpacityByArray"
                         default_values="0"
                         name="OpacityByArray"
                         number_of_elements="1"
                         label="Use Opacity Array"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, the Opacity Array will be used to determine the
          point gaussian sprites.
        </Documentation>
      </IntVectorProperty>
      <StringVectorProperty name="OpacityArray"
                            command="SelectOpacityArray"
                            number_of_elements="5"
                            element_types="0 0 0 0 2"
                            label="Gaussian Opacity Array"
                            panel_visibility="advanced">
        <ArrayListDomain name="array_list"
          input_domain_name="input_point_array">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          This property specifies the name of the input array to map to point opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="OpacityByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SelectOpacityArrayComponent"
                         default_values="0"
                         name="OpacityArrayComponent"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="OpacityArray" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>
          This property indicates the component of the array to be used for opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="OpacityByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>
      <ProxyProperty command="SetOpacityTransferFunction"
                     name="OpacityTransferFunction"
                     panel_visibility="advanced"
                     panel_widget="transfer_function_editor">
        <Documentation>Set the piecewise function used to map data array to sprite opacity.
        OpacityTransferFunction is only used if ScaleByArray is set and OpacityArray is
        also given.</Documentation>
        <RangedTransferFunctionDomain name="proxy_list">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ArraySelection" name="OpacityArray" />
            <Property function="ComponentSelection" name="OpacityArrayComponent" />
          </RequiredProperties>
        </RangedTransferFunctionDomain>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="OpacityByArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </ProxyProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1.0"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1" min="0" name="range" />
        <Documentation>
          The opacity to use when rendering the model.
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetEdgeColor"
                            default_values="0 0 0.5"
                            name="EdgeColor"
                            number_of_elements="3">
        <Documentation>Set the edge color. This color is used to draw the edge
        for the polygonal data when EdgeVisibility is on.</Documentation>
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="EdgeColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetAmbientColor"
                            default_values="1.0 1.0 1.0"
                            name="AmbientColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="ForegroundColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDiffuseColor"
                            default_values="1.0 1.0 1.0"
                            name="DiffuseColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SurfaceColor" unlink_if_modified="1" />
        </Hints>
        <Documentation>
          The diffuse color of the model
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecularColor"
                            default_values="1.0 1.0 1.0"
                            name="SpecularColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Documentation>
          The specular color of the model
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPointSize"
                            default_values="2.0"
                            name="PointSize"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            label="Translation"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetPickable"
                         default_values="1"
                         name="Pickable"
                         number_of_elements="1">
        <Hints>
          <NoDefault />
        </Hints>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetCoordinateSystem"
                         default_values="0"
                         name="CoordinateSystem"
                         number_of_elements="1">
        <Documentation>Specify the coordinate system that this prop is relative to. This defaults
          to world but can be set to physical.  Representations in the PHYSICAL coordinate
          system are automatically transformed by the PhysicalToWorldMatrix.  In HMD-based
          displays, this has the effect of fixing the object with respect to the display.  In
          general, the PhysicalToWorldMatrix does not necessarily correspond to the coordinate
          system of the display, but can be used for similar purposes.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Navigable"
                 value="0" />
          <Entry text="Fixed"
                 value="1" />
        </EnumerationDomain>
      </IntVectorProperty>
      <!-- End of PointGaussianRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkUnstructuredGridVolumeRepresentation"
                         name="UnstructuredGridVolumeRepresentation"
                         processes="client|renderserver|dataserver"
                         si_class="vtkSIUnstructuredGridVolumeRepresentationProxy">
      <Documentation>Representation for rendering a vtkImageData as
      volume.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkUnstructuredGridBase" />
        </DataTypeDomain>
        <InputArrayDomain name="input_array_any">
        </InputArrayDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5" >
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseSeparateOpacityArray"
                         default_values="0"
                         name="UseSeparateOpacityArray"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool"/>
        <Documentation>
          If this property is on, the Opacity Array will be used to determine the
          point gaussian sprites.
        </Documentation>
      </IntVectorProperty>
      <StringVectorProperty name="OpacityArrayName"
                            command="SelectOpacityArray"
                            number_of_elements="5"
                            element_types="0 0 0 0 2"
                            label="Volume Opacity Array"
                            panel_visibility="advanced">
        <ArrayListDomain name="array_list"
          input_domain_name="input_point_array">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>
          This property specifies the name of the input array to map to opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseSeparateOpacityArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SelectOpacityArrayComponent"
                         default_values="0"
                         name="OpacityComponent"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="OpacityArrayName" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>
          This property indicates the component of the array to be used for opacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseSeparateOpacityArray" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </IntVectorProperty>

      <StringVectorProperty name="Assembly"
        command="SetActiveAssembly"
        number_of_elements="1"
        default_values=""
        panel_visibility="multiblock_inspector">
        <DataAssemblyListDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </DataAssemblyListDomain>
        <Documentation>
          Select which assembly is used when specify selectors
          to choose block visibilities, block colors, etc. for composite datasets.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockSelectors"
                            command="AddBlockSelector"
                            clean_command="RemoveAllBlockSelectors"
                            repeat_command="1"
                            number_of_elements_per_command="1"
                            panel_visibility="multiblock_inspector"
                            number_of_elements="1"
                            default_values="/">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ActiveAssembly" name="Assembly" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Documentation>
          For composite datasets, specify selectors to limit the view
          to a chosen subset of blocks.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetPickable"
                         default_values="1"
                         name="Pickable"
                         number_of_elements="1">
        <Hints>
          <NoDefault />
        </Hints>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetInterpolationType"
                         default_values="1"
                         name="InterpolationType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Nearest"
                 value="0" />
          <Entry text="Linear"
                 value="1" />
        </EnumerationDomain>
      </IntVectorProperty>
      <ProxyProperty command="SetColor"
                     name="LookupTable" >
        <ProxyGroupDomain name="groups">
          <Group name="transfer_functions" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When enabled, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMultiComponentsMapping"
                         default_values="0"
                         name="MultiComponentsMapping"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Hints>
          <PropertyWidgetDecorator type="MultiComponentsDecorator"
                                   components="2 4" />
        </Hints>
      </IntVectorProperty>
      <ProxyProperty command="SetScalarOpacity"
                     name="ScalarOpacityFunction" >
        <ProxyGroupDomain name="groups">
          <Group name="piecewise_functions" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <StringVectorProperty command="SetActiveVolumeMapper"
                            default_values="Projected tetra"
                            name="SelectMapper"
                            number_of_elements="1">
        <Documentation>Select the volume mapper to use for Volume
        rendering.</Documentation>
        <StringListDomain name="list">
          <String value="Projected tetra" />
          <String value="Z sweep" />
          <String value="Bunyk ray cast" />
          <String value="Resample To Image" />
        </StringListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetSamplingDimensions"
                         default_values="128 128 128"
                         name="SamplingDimensions"
                         number_of_elements="3">
        <IntRangeDomain name="range" min="1 1 1"/>
        <Documentation>
        How many linear samples we want along each axis
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="SelectMapper"
                                   value="Resample To Image" />
        </Hints>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetScalarOpacityUnitDistance"
                            default_values="1"
                            name="ScalarOpacityUnitDistance"
                            number_of_elements="1">
        <BoundsDomain mode="approximate_cell_length"
                      name="bounds" >
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </BoundsDomain>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetUseDataPartitions"
                         default_values="0"
                         name="UseDataPartitions"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Specify whether or not to redistribute the data when actor is translucent.
        Default is false.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="VolumeDummyMapper"
               proxygroup="mappers"
               proxyname="DummyVolumeMapper"></Proxy>
        <ExposedProperties>
          <Property name="RayCastFunction" />
        </ExposedProperties>
      </SubProxy>
      <SubProxy>
        <Proxy name="VolumeBunykMapper"
               proxygroup="mappers"
               proxyname="UnstructuredGridVolumeRayCastMapper"></Proxy>
        <ShareProperties subproxy="VolumeDummyMapper"></ShareProperties>
      </SubProxy>
      <SubProxy>
        <Proxy name="VolumeZSweepMapper"
               proxygroup="mappers"
               proxyname="UnstructuredGridVolumeZSweepMapper"></Proxy>
        <ShareProperties subproxy="VolumeDummyMapper"></ShareProperties>
      </SubProxy>
      <SubProxy>
        <Proxy name="VolumePTMapper"
               proxygroup="mappers"
               proxyname="ProjectedTetrahedraMapper"></Proxy>
        <ShareProperties subproxy="VolumeDummyMapper"></ShareProperties>
        <ExposedProperties>
          <Property name="UseFloatingPointFrameBuffer" />
        </ExposedProperties>
      </SubProxy>
      <SubProxy>
        <Proxy name="VolumeResampleToImageMapper"
               proxygroup="mappers"
               proxyname="UnstructuredGridResampleToImageMapper"></Proxy>
      </SubProxy>
      <!-- end of UnstructuredGridVolumeRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkImageSliceRepresentation"
                         name="ImageSliceRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation to show 2D images. If the input image has
      3D extents, then this representation shows a single Z
      slice.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Set the input to the representation. Must be a
        vtkImageData producer.</Documentation>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="any"
                          name="input_array_any"></InputArrayDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetSlice"
                         default_values="0"
                         name="Slice"
                         number_of_elements="1">
        <Documentation>Set the current slice number. Slice number is used to
        load a 2D slice from a 3D input image. If the input image is 2D, then
        the slice number if ignored. The direction of the slice is determined
        by SliceMode.</Documentation>
        <DimensionsDomain name="dims">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="Direction"
                      name="SliceMode" />
          </RequiredProperties>
        </DimensionsDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetSliceMode"
                         default_values="5"
                         label="Slice Direction"
                         name="SliceMode"
                         number_of_elements="1">
        <Documentation>Determines the direction of slicing to obtain a 2D slice
        from a 3D image.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="XY Plane"
                 value="5" />
          <Entry text="YZ Plane"
                 value="6" />
          <Entry text="XZ Plane"
                 value="7" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to True, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>

      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup table to use for scalar
        mapping.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty command="SetUseXYPlane"
                         default_values="0"
                         name="UseXYPlane"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set, the image slice is always rendered in the XY
        plane (Z==0) irrespective of the image bounds. Default if
        Off.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetPickable"
                         default_values="1"
                         name="Pickable"
                         number_of_elements="1">
        <Hints>
          <NoDefault />
        </Hints>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1.0"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCoordinateSystem"
                         default_values="0"
                         name="CoordinateSystem"
                         number_of_elements="1">
        <Documentation>Specify the coordinate system that this prop is relative to. This defaults
          to world but can be set to physical.  Representations in the PHYSICAL coordinate
          system are automatically transformed by the PhysicalToWorldMatrix.  In HMD-based
          displays, this has the effect of fixing the object with respect to the display.  In
          general, the PhysicalToWorldMatrix does not necessarily correspond to the coordinate
          system of the display, but can be used for similar purposes.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Navigable"
                 value="0" />
          <Entry text="Fixed"
                 value="1" />
        </EnumerationDomain>
      </IntVectorProperty>
    <!-- End of ImageSliceRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkCellGridRepresentation"
                         name="CellGridSurfaceRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation to show a cell-grid in a 3D render view.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkCellGrid" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="any"
                          name="input_array_any" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell_1"
                          number_of_components="1"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_1"
                          number_of_components="1"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_2"
                          number_of_components="2"
                          optional="1" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell_3"
                          number_of_components="3"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_3"
                          number_of_components="3"
                          optional="1" />
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Get/Set the visibility of the
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list"
                         input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetRepresentation"
                            default_values="Surface"
                            name="Representation"
                            panel_widget="display_representation_selector"
                            number_of_elements="1">
        <StringListDomain name="string_list">
          <String value="Points" />
          <String value="Wireframe" />
          <String value="Surface" />
          <String value="Surface With Edges" />
          <String value="Outline" />
        </StringListDomain>
      </StringVectorProperty>
      <IntVectorProperty name="SidesToShow"
        number_of_elements="1"
        default_values="37"
        command="SetSidesToShow">
        <EnumerationDomain name="enum">
          <!--
          <Entry text="Vertices of Edges"     value="1"/>
          <Entry text="Vertices of Surfaces"  value="2"/>
          <Entry text="Edges of Surfaces"     value="4"/>
          <Entry text="Vertices of Volumes"   value="8"/>
          <Entry text="Edges of Volumes"      value="16"/>
          <Entry text="Surfaces of Volumes"   value="32"/>
          -->
          <Entry text="Surfaces of Inputs"    value="32"/>
          <Entry text="Edges of Inputs"       value="20"/>
          <Entry text="Vertices of Inputs"    value="11"/>
          <Entry text="All Sides"             value="63"/>
          <Entry text="Next Lowest Dimension" value="37"/>
        </EnumerationDomain>
        <Documentation>Choose how to render the input.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="PreserveRenderableInputs"
        number_of_elements="1"
        default_values="1"
        command="SetPreserveRenderableInputs">
        <BooleanDomain name="bool" />
        <Documentation>Set whether to preserve renderable inputs or only show their boundaries.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="OmitSidesForRenderableInputs"
        number_of_elements="1"
        default_values="1"
        command="SetOmitSidesForRenderableInputs">
        <BooleanDomain name="bool" />
        <Documentation>Set whether to compute sides for renderable inputs or only for volumetric cells.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetAmbient"
                            default_values="0.0"
                            name="Ambient"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Interpolation"
                                   value="3"
                                   inverse="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDiffuse"
                            default_values="1.0"
                            name="Diffuse"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecular"
                            default_values="0.0"
                            name="Specular"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Interpolation"
                                   value="3"
                                   inverse="1" />
        </Hints>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetSuppressLOD"
                         default_values="0"
                         name="SuppressLOD"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <DoubleVectorProperty command="SetAmbientColor"
                            default_values="1.0 1.0 1.0"
                            name="AmbientColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="ForegroundColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDiffuseColor"
                            default_values="1.0 1.0 1.0"
                            name="DiffuseColor"
                            number_of_elements="3"
                            panel_widget="color_selector_with_palette">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SurfaceColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecularColor"
                            default_values="1.0 1.0 1.0"
                            name="SpecularColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Interpolation"
                                   value="3"
                                   inverse="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetLineWidth"
                            default_values="1.0"
                            name="LineWidth"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPointSize"
                            default_values="2.0"
                            name="PointSize"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetRenderLinesAsTubes"
                         default_values="0"
                         name="RenderLinesAsTubes"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, all lines are rendered as 3D tubes, if supported by OpenGL driver.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetRenderPointsAsSpheres"
                         default_values="0"
                         name="RenderPointsAsSpheres"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, all points are rendered as 3D spheres, if supported by OpenGL driver.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetInterpolation"
                         default_values="1"
                         name="Interpolation"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Flat"
                 value="0" />
          <Entry text="Gouraud"
                 value="1" />
          <Entry text="PBR"
                 value="3" />
        </EnumerationDomain>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1.0"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecularPower"
                            default_values="100.0"
                            name="SpecularPower"
                            number_of_elements="1">
        <DoubleRangeDomain max="100"
                           min="0"
                           name="range" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Interpolation"
                                   value="3"
                                   inverse="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetLuminosity"
                            default_values="0.0"
                            name="Luminosity"
                            number_of_elements="1">
        <DoubleRangeDomain max="100.0"
                           min="0"
                           name="range" />
        <Documentation>Makes the object emit light.
        Only takes effect with OSPRay's path traced renderer.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="OSPRayHidingDecorator" />
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="EnableOSPRay"
                                   values="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetEdgeColor"
                            default_values="0 0 0.5"
                            name="EdgeColor"
                            number_of_elements="3">
        <Documentation>Set the edge color. This color is used to draw the edge
        for the polygonal data when EdgeVisibility is on.</Documentation>
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="EdgeColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetInteractiveSelectionColor"
                            default_values="0.5 0.0 1.0"
                            name="InteractiveSelectionColor"
                            number_of_elements="3">
        <Documentation>Set the preselection color. This color is used to draw the edge
        of the current preselection.</Documentation>
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="InteractiveSelectionColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            label="Translation"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <DoubleVectorProperty argument_is_array="1"
                            command="SetUserTransform"
                            default_values="1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
                            name="UserTransform"
                            number_of_elements="16">
        <Documentation>
          In addition to the instance variables such as position and
          orientation, you can add an additional transformation for your own
          use. This transformation is concatenated with the actor's internal
          transformation, which you implicitly create through the use of
          Position, Origin, Orientation. The value is 4x4 matrix for the linear
          transform to use.
        </Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty command="SetPickable"
                         default_values="1"
                         name="Pickable"
                         number_of_elements="1">
        <Hints>
          <NoDefault />
        </Hints>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup-table to use to map data array to colors.
        Lookuptable is only used with MapScalars to ON.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty default_values="0"
                         name="UseSeparateColorMap"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>By default, ParaView shares a single color map among all datasets colored
        by arrays that have the same name. When this option is enabled, the active dataset will
        be assigned a separate color map not shared by other datasets.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When enabled, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty default_values="0"
                         name="MultiComponentsMapping"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Enable multi components mapping. For a two-components array,
        the first component is mapped to the color, the second component is mapped to the
        opacity. For a four-components array, the first, second and third components are used as
        RGB values and the fourth component is mapped to the opacity. Only available
        when MapScalars is ON. This feature forces "Separate Color Map" and scales the color and
        the opacity range with the correct component.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="Representation"
                                   value="Volume" />
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="MapScalars"
                                   value="1" />
          <PropertyWidgetDecorator type="MultiComponentsDecorator"
                                   components="2 4" />
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetInterpolateScalarsBeforeMapping"
                         default_values="1"
                         name="InterpolateScalarsBeforeMapping"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to true (default), texture coordinates
        are sent to and interpolated by the graphics card. This is
        equivalent with interpolating scalars and then mapping them to
        obtain colors between points. Otherwise, colors are sent to
        and interpolated by the graphics card.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetStatic"
                         default_values="0"
                         name="StaticMode"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <StringVectorProperty name="Assembly"
        command="SetActiveAssembly"
        default_values=""
        number_of_elements="1"
        panel_visibility="multiblock_inspector">
        <DataAssemblyListDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </DataAssemblyListDomain>
        <Documentation>
          Select which assembly is used when specify selectors
          to choose block visibilities, block colors, etc. for composite datasets.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="SelectedBlockSelectors"
                            repeat_command="1"
                            number_of_elements_per_command="1"
                            number_of_elements="1"
                            default_values=""
                            panel_visibility="multiblock_inspector">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input"/>
            <Property function="ActiveAssembly" name="Assembly"/>
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          Used by the multiblock inspector to track the selected block selectors.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockSelectors"
                            command="AddBlockSelector"
                            clean_command="RemoveAllBlockSelectors"
                            repeat_command="1"
                            number_of_elements_per_command="1"
                            panel_visibility="multiblock_inspector"
                            number_of_elements="1"
                            default_values="/">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ActiveAssembly" name="Assembly" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Documentation>
          For composite datasets, specify selectors to limit the view
          to a chosen subset of blocks.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockColors"
                            command="SetBlockColor"
                            clean_command="RemoveAllBlockColors"
                            element_types="2 1 1 1"
                            number_of_elements_per_command="4"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
         <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ActiveAssembly" name="Assembly" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          For composite datasets, specify colors associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockColorArrayNames"
                            command="SetBlockArrayName"
                            clean_command="RemoveAllBlockArrayNames"
                            element_types="2 0 2"
                            number_of_elements_per_command="3"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
        <RepresentedArrayListDomain name="array_list" input_domain_name="input_array_any">
          <RequiredProperties>
            <Property function="Input" name="Input"/>
            <Property function="ActiveAssembly" name="Assembly"/>
            <Property function="Selectors" name="SelectedBlockSelectors"/>
          </RequiredProperties>
        </RepresentedArrayListDomain>
        <Documentation>
          For composite datasets, specify the color array name associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
        <Hints>
          <NoDefault/>
        </Hints>
      </StringVectorProperty>

      <ProxyProperty command="SetBlockLookupTable"
                     name="BlockLookupTables"
                     clean_command="RemoveAllBlockLookupTables"
                     repeat_command="1"
                     panel_visibility="multiblock_inspector">
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables"/>
        </ProxyGroupDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          Set the block lookup-table to use to map data array to colors.
          Lookup table is only used with MapScalars to ON or BlockMapScalars to ON.
        </Documentation>
      </ProxyProperty>

      <StringVectorProperty name="BlockUseSeparateColorMaps"
                            element_types="2 0"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input"/>
            <Property function="ActiveAssembly" name="Assembly"/>
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          By default, ParaView shares a single color map among all datasets colored
          by arrays that have the same name. When this option is enabled, the block of the active dataset will
          be assigned a separate color map not shared by other blocks or datasets.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockMapScalars"
                            command="SetBlockMapScalars"
                            clean_command="RemoveAllBlockMapScalars"
                            element_types="2 0"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input"/>
            <Property function="ActiveAssembly" name="Assembly"/>
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          For composite datasets, specify if to map scalars associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockInterpolateScalarsBeforeMappings"
                            command="SetBlockInterpolateScalarsBeforeMapping"
                            clean_command="RemoveAllBlockInterpolateScalarsBeforeMappings"
                            element_types="2 0"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input"/>
            <Property function="ActiveAssembly" name="Assembly"/>
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          For composite datasets, specify if to interpolate scalars before mapping associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockOpacities"
                            command="SetBlockOpacity"
                            clean_command="RemoveAllBlockOpacities"
                            element_types="2 1"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_visibility="multiblock_inspector">
         <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ActiveAssembly" name="Assembly" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Hints>
          <NoDefault/>
        </Hints>
        <Documentation>
          For composite datasets, specify opacities associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty default_values="1"
                         label="Map Scalars"
                         name="BlockMapScalarsGUI"
                         number_of_elements="1"
                         panel_visibility="multiblock_properties">
        <BooleanDomain name="bool"/>
        <Documentation>
          For composite datasets, specify if to map scalars associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty default_values="1"
                         label="Interpolate Scalars Before Mapping"
                         name="BlockInterpolateScalarsBeforeMappingsGUI"
                         number_of_elements="1"
                         panel_visibility="multiblock_properties">
        <BooleanDomain name="bool"/>
        <Documentation>
          For composite datasets, specify if to interpolate scalars before mapping associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty default_values="1.0"
                            label="Opacity"
                            name="BlockOpacitiesGUI"
                            number_of_elements="1"
                            panel_visibility="multiblock_properties">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range"/>
        <Documentation>
          For composite datasets, specify opacities associated with selectors
          on the assembly chosen using **Assembly**.
        </Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty command="SetBlockColorsDistinctValues"
                         default_values="7"
                         name="BlockColorsDistinctValues"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>
          Determines the number of distinct values in
          vtkBlockColors. This array is added to each block if
          the dataset is a composite dataset. The array has one value
          set to (blockIndex % BlockColorsDistinctValues)
        </Documentation>
        <IntRangeDomain min="2" name="range" />
        <Hints>
          <PropertyLink group="settings"
                        proxy="GeneralSettings"
                        property="BlockColorsDistinctValues"/>
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseDataPartitions"
                         default_values="0"
                         name="UseDataPartitions"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Specify whether or not to redistribute the data when actor is translucent.
        Default is false.</Documentation>
      </IntVectorProperty>
    <!-- End of CellGridSurfaceRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy base_proxygroup="internal_representations"
                         base_proxyname="SurfaceRepresentationBase"
                         class="vtkGeometryRepresentationWithFaces"
                         name="SurfaceRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation to show any dataset in a 3D render
      view.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="any"
                          name="input_array_any" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point"
                          optional="1" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell_1"
                          number_of_components="1"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_1"
                          number_of_components="1"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_2"
                          number_of_components="2"
                          optional="1" />
        <InputArrayDomain attribute_type="cell"
                          name="input_array_cell_3"
                          number_of_components="3"
                          optional="1" />
        <InputArrayDomain attribute_type="point"
                          name="input_array_point_3"
                          number_of_components="3"
                          optional="1" />
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetBackfaceRepresentation"
                         default_values="400"
                         name="BackfaceRepresentation"
                         number_of_elements="1">
        <Documentation>Choose the representation type for the
        backface.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Follow Frontface"
                 value="400" />
          <Entry text="Cull Backface"
                 value="401" />
          <Entry text="Cull Frontface"
                 value="402" />
          <Entry text="Points"
                 value="0" />
          <Entry text="Wireframe"
                 value="1" />
          <Entry text="Surface"
                 value="2" />
          <Entry text="Surface With Edges"
                 value="3" />
        </EnumerationDomain>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetBackfaceOpacity"
                            default_values="1.0"
                            name="BackfaceOpacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetBackfaceAmbientColor"
                            default_values="1.0 1.0 1.0"
                            name="BackfaceAmbientColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetBackfaceDiffuseColor"
                            default_values="1.0 1.0 1.0"
                            name="BackfaceDiffuseColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SurfaceColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
    </RepresentationProxy>
    <!-- ================================================================== -->
    <RepresentationProxy base_proxygroup="internal_representations"
                         base_proxyname="SurfaceRepresentationBase"
                         class="vtkGlyph3DRepresentation"
                         name="Glyph3DRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation to show any dataset in a 3D render
      view.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <InputArrayDomain name="scale_array"
                          number_of_components="1,3"
                          optional="1" />
        <InputArrayDomain name="vector_array"
                          number_of_components="3,4"
                          optional="1" />
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <InputProperty command="SetInputConnection"
                     label="Glyph Type"
                     name="GlyphType"
                     panel_visibility="advanced"
                     port_index="1">
        <Documentation>Specify the source objects.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
          <DataType value="vtkDataObjectTree" />
        </DataTypeDomain>
        <ProxyListDomain name="proxy_list">
          <Proxy group="sources" name="ArrowSource" />
          <Proxy group="sources" name="ConeSource" />
          <Proxy group="sources" name="CubeSource" />
          <Proxy group="sources" name="CylinderSource" />
          <Proxy group="sources" name="LineSource" />
          <Proxy group="sources" name="SphereSource" />
          <Proxy group="sources" name="GlyphSource2D" />
          <Proxy group="internal_filters" name="PipelineConnection" />
        </ProxyListDomain>
        <Hints>
          <ProxyPropertyWidget selected_proxy_panel_visibility="advanced" />
          <!-- show the selected proxy's panel, only in advanced mode. -->
        </Hints>
      </InputProperty>
      <IntVectorProperty command="SetMeshVisibility"
                         default_values="0"
                         name="MeshVisibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Get/Set the visibility of the original
        mesh.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetMaskArray"
                            default_values=""
                            label="Mask Array"
                            name="SelectMaskArray"
                            number_of_elements="1"></StringVectorProperty>
      <StringVectorProperty command="SetScaleArray"
                            default_values=""
                            label="Scale Array"
                            name="SelectScaleArray"
                            number_of_elements="1">
        <ArrayListDomain attribute_type="Scalars"
                         input_domain_name="scale_array"
                         name="array_list"
                         none_string="None">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetScaling"
                         default_values="0"
                         name="Scaling"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Enable/Disable scaling of source
        geometry.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetScaleMode"
                         default_values="0"
                         name="ScaleMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="No Data Scaling Off"
                 value="0" />
          <Entry text="Magnitude"
                 value="1" />
          <Entry text="Vector Components"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty command="SetOrientationArray"
                            default_values=""
                            label="Orientation Vectors"
                            name="SelectOrientationVectors"
                            number_of_elements="1">
        <ArrayListDomain attribute_type="Vectors"
                         input_domain_name="vector_array"
                         name="array_list"
                         none_string="None">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
      </StringVectorProperty>
      <DoubleVectorProperty command="SetScaleFactor"
                            default_values="1.0"
                            name="ScaleFactor"
                            number_of_elements="1">
        <BoundsDomain mode="scaled_extent"
                      name="bounds"
                      scale_factor="0.1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </BoundsDomain>
        <ArrayRangeDomain name="scalar_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SelectScaleArray" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <ArrayRangeDomain name="vector_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SelectOrientationVectors" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <Documentation>The value of this property will be used as a multiplier
        for scaling the glyphs before adding them to the
        output.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetOrient"
                         default_values="0"
                         name="Orient"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, the glyphs will be
        oriented based on the selected orientation vector
        array.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetOrientationMode"
                         default_values="0"
                         name="OrientationMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Direction"
                 value="0" />
          <Entry text="Rotation"
                 value="1" />
          <Entry text="Quaternion"
                 value="2" />
        </EnumerationDomain>
        <Documentation>Orientation mode indicates if the OrientationArray
        provides the direction vector for the orientation, the rotations
        around each axes or the quaternion in WXYZ format. Default is DIRECTION.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMasking"
                         default_values="0"
                         name="Masking"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Tells the mapper to skip glyphing input points that
        haves false values in the mask array. If there is no mask array (id
        access mode is set and there is no such id, or array name access mode
        is set and the there is no such name), masking is silently ignored. A
        mask array is a vtkBitArray with only one component.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetSourceIndexing"
                         default_values="0"
                         name="UseGlyphTable"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When enabled, the source index array would be used to select the
        glyph source. If not, only the first source input will be used to generate
        the glyph. It's a prerequisite to enable UseCompositeGlyphTable.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetSourceIndexArray"
                            default_values=""
                            name="GlyphTableIndexArray"
                            number_of_elements="1">
        <ArrayListDomain attribute_type="Scalars"
                         input_domain_name="input_array_point"
                         name="array_list"
                         none_string="None">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseSourceTableTree"
                         default_values="0"
                         name="UseCompositeGlyphTable"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When true, the glyph data is expected to be a multiblock
        dataset, where each top-level node contains a separate glyph which may
        be selected by a point data array on the input dataset. UseGlyphTable
        must be enabled as a prerequisite.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="UseGlyphTable"
                                   value="1" />
          <!-- enable this widget when UseGlyphTable==1 -->
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseCullingAndLOD"
                         default_values="0"
                         name="UseGlyphCullingAndLOD"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When true, culling pass and level of details are enabled.
        The culling pass detects points outside the frustum view and LOD displays
        decimated geometry based on the distance between the camera and the instance.
        This allows to render a higher number of glyphs at interactive rate.
        This feature works only with OpenGL driver >= 4.0.
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetLODDistanceAndTargetReduction"
                            label="LOD Values"
                            name="LODValues"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            set_number_command="SetNumberOfLOD"
                            use_index="1">
        <ArrayRangeDomain name="scalar_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="Input"
                      name="UseGlyphCullingAndLOD" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <Documentation>
        Configure LODs. The first value is the distance after which it is enabled.
        The second value is the decimation parameter (0 displays full geometry,
        1 displays only a point)
        The maximum number of LODs depends on the GPU capacity.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="UseGlyphCullingAndLOD"
                                   value="1" />
          <!-- enable this widget when UseGlyphCullingAndLOD==1 -->+
          <ShowComponentLabels>
            <ComponentLabel component="0" label="Distance"/>
            <ComponentLabel component="1" label="Decimation"/>
          </ShowComponentLabels>
        </Hints>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetColorByLODIndex"
                         default_values="0"
                         label = "Color By LOD Index"
                         name="ColorByLODIndex"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When true, each level of detail has its own color based on its index.
        It can be useful to correctly configure the levels of details.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="UseGlyphCullingAndLOD"
                                   value="1" />
        </Hints>
      </IntVectorProperty>
      <!-- end of Glyph3DRepresentation -->
    </RepresentationProxy>
    <!-- ================================================================== -->
    <RepresentationProxy class="vtkDataLabelRepresentation"
                         name="DataLabelRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation used to add labels to points/cells of any
      dataset.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <InputArrayDomain name="input_array_any"></InputArrayDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetPointLabelColor"
                            default_values="1 1 0"
                            name="PointLabelColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPointLabelOpacity"
                            default_values="1.0"
                            name="PointLabelOpacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1.0"
                           min="0.0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetPointLabelFontFamily"
                         default_values="0"
                         name="PointLabelFontFamily"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Arial"
                 value="0" />
          <Entry text="Courier"
                 value="1" />
          <Entry text="Times"
                 value="2" />
          <Entry text="File"
                 value="4" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty command="SetPointLabelFontFile"
                            name="PointLabelFontFile"
                            number_of_elements="1"
                            default_values="">
      </StringVectorProperty>
      <IntVectorProperty command="SetMaximumNumberOfLabels"
                         default_values="100"
                         name="MaximumNumberOfLabels"
                         number_of_elements="1">
        <IntRangeDomain min="1"
                        name="range" />
        <Documentation>The maximum number of point labels shown.  If the dataset
          contains more points that this number, a random subset of this size is
          chosen and labeled.</Documentation>
        <Hints>
          <PropertyLink group="settings"
                        proxy="GeneralSettings"
                        property="MaximumNumberOfDataRepresentationLabels"/>
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelBold"
                         default_values="0"
                         name="PointLabelBold"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelItalic"
                         default_values="0"
                         name="PointLabelItalic"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelShadow"
                         default_values="0"
                         name="PointLabelShadow"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelFontSize"
                         default_values="18"
                         name="PointLabelFontSize"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
      </IntVectorProperty>
      <StringVectorProperty command="SetPointLabelFormat"
                            default_values=""
                            name="PointLabelFormat"
                            number_of_elements="1">
        <Documentation>
          This should be a printf-style format string. By default,
          the mapper will try to print each component of the tuple
          using a sane format: d for integers, f for floats, g for
          doubles, ld for longs, et cetera. If you need a different
          format, set it here. You can do things like limit the number
          of significant digits, add prefixes/suffixes, basically
          anything that printf can do. Leave empty to auto select an
          appropriate format.
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetPointLabelJustification"
                         default_values="0"
                         name="PointLabelJustification"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Left"
                 value="0" />
          <Entry text="Center"
                 value="1" />
          <Entry text="Right"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelVisibility"
                         default_values="0"
                         name="PointLabelVisibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetPointLabelMode"
                         default_values="6"
                         name="PointLabelMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="IDs"
                 value="0" />
          <Entry text="Scalars"
                 value="1" />
          <Entry text="Vectors"
                 value="2" />
          <Entry text="Normals"
                 value="3" />
          <Entry text="TCoords"
                 value="4" />
          <Entry text="Tensors"
                 value="5" />
          <Entry text="FieldData"
                 value="6" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty command="SetPointFieldDataArrayName"
                            name="PointFieldDataArrayName"
                            number_of_elements="1">
        <ArrayListDomain input_domain_name="input_array"
                         name="array_list">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
      </StringVectorProperty>
      <DoubleVectorProperty command="SetCellLabelColor"
                            default_values="0.0 1.0 0.0"
                            name="CellLabelColor"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetCellLabelOpacity"
                            default_values="1.0"
                            name="CellLabelOpacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1.0"
                           min="0.0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCellLabelFontFamily"
                         default_values="0"
                         name="CellLabelFontFamily"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Arial"
                 value="0" />
          <Entry text="Courier"
                 value="1" />
          <Entry text="Times"
                 value="2" />
          <Entry text="File"
                 value="4" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty command="SetCellLabelFontFile"
                            name="CellLabelFontFile"
                            number_of_elements="1"
                            default_values="">
      </StringVectorProperty>
      <IntVectorProperty command="SetCellLabelBold"
                         default_values="0"
                         name="CellLabelBold"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetCellLabelItalic"
                         default_values="0"
                         name="CellLabelItalic"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetCellLabelShadow"
                         default_values="0"
                         name="CellLabelShadow"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetCellLabelFontSize"
                         default_values="18"
                         name="CellLabelFontSize"
                         number_of_elements="1">
        <IntRangeDomain min="0"
                        name="range" />
      </IntVectorProperty>
      <StringVectorProperty command="SetCellLabelFormat"
                            default_values=""
                            name="CellLabelFormat"
                            number_of_elements="1">
        <Documentation>
          This should be a printf-style format string. By default,
          the mapper will try to print each component of the tuple
          using a sane format: d for integers, f for floats, g for
          doubles, ld for longs, et cetera. If you need a different
          format, set it here. You can do things like limit the number
          of significant digits, add prefixes/suffixes, basically
          anything that printf can do. Leave empty to auto select an
          appropriate format.
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetCellLabelJustification"
                         default_values="0"
                         name="CellLabelJustification"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Left"
                 value="0" />
          <Entry text="Center"
                 value="1" />
          <Entry text="Right"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetCellLabelVisibility"
                         default_values="0"
                         name="CellLabelVisibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetCellLabelMode"
                         default_values="6"
                         name="CellLabelMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="IDs"
                 value="0" />
          <Entry text="Scalars"
                 value="1" />
          <Entry text="Vectors"
                 value="2" />
          <Entry text="Normals"
                 value="3" />
          <Entry text="TCoords"
                 value="4" />
          <Entry text="Tensors"
                 value="5" />
          <Entry text="FieldData"
                 value="6" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty command="SetCellFieldDataArrayName"
                            name="CellFieldDataArrayName"
                            number_of_elements="1">
        <ArrayListDomain input_domain_name="input_array"
                         name="array_list">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
      </StringVectorProperty>
      <!-- End of DataLabelRepresentation -->
    </RepresentationProxy>
    <!-- ================================================================== -->
    <RepresentationProxy class="vtkSelectionRepresentation"
                         name="SelectionRepresentation"
                         processes="client|renderserver|dataserver"
                         si_class="vtkSIProxy">
      <Documentation>Proxy to show a selection as geometry.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <InputArrayDomain name="input_array_any"></InputArrayDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Get/Set the visibility of the
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetColor"
                            default_values="1.0 0.0 1.0"
                            name="Color"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SelectionColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetLineWidth"
                            default_values="2.0"
                            name="LineWidth"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetPointSize"
                            default_values="5.0"
                            name="PointSize"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetRenderLinesAsTubes"
                         default_values="0"
                         name="RenderLinesAsTubes"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, all lines are rendered as 3D tubes, if supported by OpenGL driver.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetRenderPointsAsSpheres"
                         default_values="0"
                         name="RenderPointsAsSpheres"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, all points are rendered as 3D spheres, if supported by OpenGL driver.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetRepresentation"
                         default_values="1"
                         name="Representation"
                         panel_widget="display_representation_selector"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Points"
                 value="0" />
          <Entry text="Wireframe"
                 value="1" />
          <Entry text="Surface"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseOutline"
                         default_values="0"
                         name="UseOutline"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            default_values="0 0 0"
                            name="Position"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetScale"
                            default_values="1 1 1"
                            name="Scale"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrientation"
                            default_values="0 0 0"
                            name="Orientation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOrigin"
                            default_values="0 0 0"
                            name="Origin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <DoubleVectorProperty argument_is_array="1"
                            command="SetUserTransform"
                            default_values="1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1"
                            name="UserTransform"
                            number_of_elements="16">
        <Documentation>
          In addition to the instance variables such as position and
          orientation, you can add an additional transformation for your own
          use. This transformation is concatenated with the actor's internal
          transformation, which you implicitly create through the use of
          Position, Origin, Orientation. The value is 4x4 matrix for the linear
          transform to use.
        </Documentation>
      </DoubleVectorProperty>

      <SubProxy command="SetLabelRepresentation">
        <Proxy name="LabelRepresentation"
               proxygroup="representations"
               proxyname="DataLabelRepresentation" />
        <ExposedProperties>
          <Property name="CellFieldDataArrayName" />
          <Property name="CellLabelBold" />
          <Property name="CellLabelColor" />
          <Property name="CellLabelFontFamily" />
          <Property name="CellLabelFontFile" />
          <Property name="CellLabelFontSize" />
          <Property name="CellLabelFormat" />
          <Property name="CellLabelItalic" />
          <Property name="CellLabelJustification" />
          <Property name="CellLabelOpacity" />
          <Property name="CellLabelShadow" />
          <Property name="CellLabelVisibility" />
          <Property name="PointFieldDataArrayName" />
          <Property name="PointLabelBold" />
          <Property name="PointLabelColor" />
          <Property name="PointLabelFontFamily" />
          <Property name="PointLabelFontFile" />
          <Property name="PointLabelFontSize" />
          <Property name="PointLabelFormat" />
          <Property name="PointLabelItalic" />
          <Property name="PointLabelJustification" />
          <Property name="PointLabelOpacity" />
          <Property name="PointLabelShadow" />
          <Property name="PointLabelVisibility" />
          <Property name="MaximumNumberOfLabels" />
        </ExposedProperties>
      </SubProxy>

      <PropertyGroup label="Cell Label Font" panel_visibility="never" panel_widget="FontEditor">
        <Property name="CellLabelBold" function="Bold"/>
        <Property name="CellLabelColor" function="Color"/>
        <Property name="CellLabelFontFamily" function="Family"/>
        <Property name="CellLabelFontFile" function="File"/>
        <Property name="CellLabelFontSize" function="Size"/>
        <Property name="CellLabelItalic" function="Italics"/>
        <Property name="CellLabelJustification" function="Justification"/>
        <Property name="CellLabelOpacity" function="Opacity"/>
        <Property name="CellLabelShadow" function="Shadow"/>
      </PropertyGroup>

      <PropertyGroup label="Point Label Font" panel_visibility="never" panel_widget="FontEditor">
        <Property name="PointLabelBold" function="Bold"/>
        <Property name="PointLabelColor" function="Color"/>
        <Property name="PointLabelFontFamily" function="Family"/>
        <Property name="PointLabelFontFile" function="File"/>
        <Property name="PointLabelFontSize" function="Size"/>
        <Property name="PointLabelItalic" function="Italics"/>
        <Property name="PointLabelJustification" function="Justification"/>
        <Property name="PointLabelOpacity" function="Opacity"/>
        <Property name="PointLabelShadow" function="Shadow"/>
      </PropertyGroup>
      <!-- End of SelectionRepresentation -->
    </RepresentationProxy>

    <!-- ================================================================== -->
    <RepresentationProxy class="vtkMoleculeRepresentation"
                         name="MoleculeRepresentation"
                         processes="client|renderserver|dataserver">
      <Documentation>Representation for a vtkMolecule.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkMolecule" />
        </DataTypeDomain>
        <Documentation>Set the input molecule for the
        representation.</Documentation>
        <InputArrayDomain attribute_type="vertex"
                          name="input_array"
                          optional="1" />
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1.0"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1" min="0" name="range" />
        <Documentation>
          The opacity to use when rendering the model.
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecular"
                            default_values="0.0"
                            name="Specular"
                            number_of_elements="1">
        <DoubleRangeDomain max="1" min="0" name="range" />
        <Documentation>
          The specularity to use when rendering the model.
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetSpecularPower"
                            default_values="100.0"
                            name="SpecularPower"
                            number_of_elements="1">
        <DoubleRangeDomain max="100" min="0" name="range" />
        <Documentation>
          The specularity to use when rendering the model.
        </Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetMapScalars"
                         default_values="1"
                         name="MapScalars"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When enabled, LookupTable will always be
        used for scalar mapping. Otherwise, when up to 4 component
        scalars are present, the components are clamped to a valid
        color interval (0-255 for an integral type and 0.0-1.0 for a
        floating point type) and then directly used as
        color.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetRenderAtoms"
                         default_values="1"
                         name="RenderAtoms"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for the atoms.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetAtomicRadiusScaleFactor"
                            default_values="0.3"
                            name="AtomicRadiusFactor"
                            number_of_elements="1">
        <DoubleRangeDomain max="3" min="0" name="range" />
        <Documentation>The scale factor to apply on atom radius. Radius is expected to be in Angstrom. </Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetAtomicRadiusType"
                         default_values="1"
                         label="Atomic Radius Type"
                         name="AtomicRadiusType"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <EnumerationDomain name="enum">
          <Entry text="Covalent"
                 value="0" />
          <Entry text="Van Der Waals"
                 value="1" />
          <Entry text="Unit"
                 value="2" />
          <Entry text="Input Array"
                 value="3" />
        </EnumerationDomain>
        <Documentation>The radius type to use.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty name="AtomicRadiusArrayName"
                            command="SetAtomicRadiusArray"
                            number_of_elements="1"
                            label="Atomic Radii Array"
                            panel_visibility="advanced">
        <ArrayListDomain  input_domain_name="input_array"
                          attribute_type="Scalars"
                          name="array_list">
          <RequiredProperties>
            <Property name="Input" function="Input"/>
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>This property specifies the name of the input array to use for atom radii. Values are expected to be in Angstrom.
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetRenderBonds"
                         default_values="1"
                         name="RenderBonds"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for the bonds.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetBondRadius"
                            default_values="0.075"
                            name="BondRadius"
                            number_of_elements="1">
        <DoubleRangeDomain max="0.5" min="0" name="range" />
        <Documentation>The bond radius, in Angstrom. </Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetUseMultiCylindersForBonds"
                         default_values="1"
                         name="MultiCylindersForBonds"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Display multiple cylinders for high bond order.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetBondColorMode"
                         default_values="1"
                         name="BondColorMode"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Use atom color for bonds. If disabled, use the custom bond color.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetBondColor"
                            default_values="1 1 1"
                            name="BondColor"
                            number_of_elements="3"
                            panel_widget="color_selector"
                            panel_visibility="default">
        <Documentation>Sets the color for the bonds.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            default_values_delimiter=";"
                            default_values="0;0;0;4;Atomic Numbers"
                            panel_visibility="never"
                            number_of_elements="5">
        <Documentation>
          Set the array to color with. One must specify the field association and
          the array name of the array. If the array is missing, scalar coloring will
          automatically be disabled.
        </Documentation>
        <RepresentedArrayListDomain name="array_list">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </RepresentedArrayListDomain>
      </StringVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup-table to use to map data array to colors.
        Lookuptable is only used with MapScalars to ON.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <!-- End of MoleculeRepresentation -->
    </RepresentationProxy>
    <PVMoleculeRepresentationProxy class="vtkPVCompositeRepresentation"
                           name="PVMoleculeRepresentation"
                           processes="client|renderserver|dataserver">
      <Documentation>PVRepresentationProxy for vtkMolecule.</Documentation>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Set the visibility for this
        representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <RepresentationType subproxy="MoleculeRepresentation"
                          subtype="Molecule"
                          text="Molecule" />
      <StringVectorProperty command="GetRepresentationTypes"
                            information_only="1"
                            name="RepresentationTypesInfo"
                            si_class="vtkSIDataArrayProperty">
        <Documentation>Property that lists the available representation types.
        This is used by the domain for "Representation" to setup the list of
        types available correctly.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetActiveRepresentation"
                            default_values="Molecule"
                            name="Representation"
                            number_of_elements="1"
                            panel_visibility="default"
                            panel_widget="display_representation_selector" >
        <Documentation>Choose the type for the representation.</Documentation>
        <RepresentationTypeDomain name="list">
          <RequiredProperties>
            <Property function="StringList"
                      name="RepresentationTypesInfo" />
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </RepresentationTypeDomain>
      </StringVectorProperty>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkMolecule" />
        </DataTypeDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="MoleculeRepresentation"
               proxygroup="representations"
               proxyname="MoleculeRepresentation" />
        <ExposedProperties>
          <PropertyGroup label="Coloring">
            <Property name="Opacity"
                      panel_visibility="default" />
            <Property name="Specular"
                      panel_visibility="default" />
            <Property name="SpecularPower"
                      panel_visibility="default" />
            <Property name="MapScalars"
                      panel_visibility="default" />
            <Property name="ColorArrayName"
                      panel_visibility="default" />
            <Property name="LookupTable"
                      panel_visibility="never" />
          </PropertyGroup>
          <PropertyGroup label="Styling"
                          panel_widget="MoleculeParameters">
            <Property name="RenderAtoms"
                      function="RenderAtoms" />
            <Property name="AtomicRadiusFactor"
                      function="AtomicRadiusFactor" />
            <Property name="AtomicRadiusType"
                      function="AtomicRadiusType"/>
            <Proprety name="AtomicRadiusArrayName"
                      function="AtomicRadiusArrayName"/>
            <Property name="RenderBonds"
                      function="RenderBonds" />
            <Property name="BondRadius"
                      function="BondRadius" />
            <Property name="MultiCylindersForBonds"
                      function="UseMultiCylindersForBonds"/>
            <Property name="BondColorMode"
                      function="BondColorMode"/>
            <Property name="BondColor"
                      function="BondColor"/>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
    </PVMoleculeRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy class="vtkChartTextRepresentation"
                              name="ChartTextRepresentation"
                              processes="client|dataserver|renderserver">
      <Documentation>Representation to show text in Chart views</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetInteractivity"
                         default_values="0"
                         name="Interactivity"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether user should be able to interactively place the text in the view.
        </Documentation>
        <!-- for now, we hide this property since we don't users interact with
             the text right now -->
      </IntVectorProperty>

      <IntVectorProperty command="SetLabelLocation"
                         default_values="4"
                         name="LabelLocation"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Any Location" value="0" />
          <Entry text="Lower Left Corner" value="1" />
          <Entry text="Lower Right Corner" value="2" />
          <Entry text="Lower Center" value="3" />
          <Entry text="Upper Left Corner" value="4" />
          <Entry text="Upper Right Corner" value="5" />
          <Entry text="Upper Center" value="6" />
        </EnumerationDomain>
        <Documentation>
          Placement of the text inside of the window.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty command="SetPosition"
                            name="Position"
                            default_values="0.05 0.05"
                            number_of_elements="2"
                            information_property="PositionInfo">
        <DoubleRangeDomain min="0 0"
                           max="1 1"
                           name="range" />
        <Documentation>
          Normalized position of the bottom left corner of the text box in pixels.
        </Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Text Position" panel_widget="TextLocationEditor">
        <Property name="LabelLocation" function="WindowLocation" />
        <Property name="Position" />
      </PropertyGroup>

      <SubProxy command="SetTextProperty">
        <Proxy name="Prop2DProperty" proxygroup="properties" proxyname="ChartTextProperty" />
        <ExposedProperties>
          <PropertyGroup label="Font Properties" panel_widget="FontEditor">
            <Property name="Color" function="Color" />
            <Property name="Opacity" function="Opacity"/>
            <Property name="FontFamily" function="Family"/>
            <Property name="FontFile" function="File"/>
            <Property name="Bold" function="Bold"/>
            <Property name="Italic" function="Italics" />
            <Property name="Shadow" function="Shadow"/>
            <Property name="FontSize" function="Size"/>
            <Property name="Justification" function="Justification"/>
            <Property name="VerticalJustification" default_values="1" />
          </PropertyGroup>

          <PropertyGroup label="Multi Cell Properties">
            <Property name="LineSpacing" panel_visibility="advanced" />
            <Property name="CellOffset" panel_visibility="advanced" />
            <Property name="InteriorLinesWidth" panel_visibility="advanced" />
            <Property name="InteriorLinesColor" panel_visibility="advanced" />
            <Property name="InteriorLinesVisibility" panel_visibility="advanced" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              class="vtkPVImageChartRepresentation"
                              name="ImageChartRepresentation"
                              processes="client|dataserver|renderserver" >
      <Documentation>Representation used by ImageChartView.</Documentation>

      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty clean_command="ResetCompositeDataSetIndices"
                   command="AddCompositeDataSetIndex"
                   default_values="0"
                   number_of_elements="1"
                   name="CompositeDataSetIndex"
                   number_of_elements_per_command="1"
                   panel_visibility="default"
                   repeat_command="1">
        <CompositeTreeDomain mode="leaves" name="tree">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </CompositeTreeDomain>
        <Documentation>
          This property lists the ids of the blocks to extract
          from the input multiblock dataset.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="InputDataTypeDecorator"
            mode="visibility" name="vtkMultiBlockDataSet" />
        </Hints>
      </IntVectorProperty>
      <StringVectorProperty command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="ColorArrayName"
                            no_custom_default="1"
                            number_of_elements="5">
        <ArrayListDomain name="array_list">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>This property specifies the name of the scalar array
        from which we will color by.</Documentation>
      </StringVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable" >
        <Documentation>Set the lookup-table to use to map data array to colors.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <IntVectorProperty default_values="0"
                         name="UseSeparateColorMap"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>By default, ParaView shares a single color map among all datasets colored
        by arrays that have the same name. When this option is enabled, the active dataset will
        be assigned a separate color map not shared by other datasets.</Documentation>
      </IntVectorProperty>
      <PropertyGroup panel_visibility="default"
                         panel_widget="ColorEditor"
                         label="Coloring" >
        <Property name="ColorArrayName" />
        <Property name="LookupTable" />
        <Property name="UseSeparateColorMap" />
      </PropertyGroup>
      <SubProxy command="SetSelectionRepresentation">

          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.

        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
          <InputProperty command="SetInputConnection"
                         name="OriginalSelectionInput"/>
        </RepresentationProxy>
      </SubProxy>
    </ChartRepresentationProxy>

<!-- =================================================================== -->
    <ChartRepresentationProxy class="vtkChartLogoRepresentation"
                              name="ChartLogoRepresentation"
                              processes="client|dataserver|renderserver">
      <Documentation>Representation to show logo in Chart views</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetLogoLocation"
                         default_values="5"
                         name="LogoLocation"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Any Location" value="0" />
          <Entry text="Lower Left Corner" value="1" />
          <Entry text="Lower Right Corner" value="2" />
          <Entry text="Lower Center" value="3" />
          <Entry text="Upper Left Corner" value="4" />
          <Entry text="Upper Right Corner" value="5" />
          <Entry text="Upper Center" value="6" />
        </EnumerationDomain>
        <Documentation>Specify placement of the logo actor.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetPosition"
                            name="Position"
                            default_values="0.05 0.05"
                            number_of_elements="2"
                            information_property="PositionInfo">
        <DoubleRangeDomain min="0 0"
            max="1 1"
            name="range" />
        <Documentation>
        Normalized position of the bottom left corner of the text box in pixels.
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="GetPosition"
                            information_only="1"
                            name="PositionInfo">
        <SimpleDoubleInformationHelper />
      </DoubleVectorProperty>

      <PropertyGroup label="Logo Position" panel_widget="TextLocationEditor">
        <Property name="LogoLocation" function="WindowLocation" />
        <Property name="Position"/>
      </PropertyGroup>

    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              class="vtkXYChartRepresentation"
                              name="XYChartRepresentationBase"
                              processes="client|dataserver|renderserver">
      <Documentation>API for representations used by XYChartView and XYBarChartView.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty clean_command="ResetCompositeDataSetIndices"
                         command="AddCompositeDataSetIndex"
                         default_values="1"
                         number_of_elements="1"
                         name="CompositeDataSetIndex"
                         number_of_elements_per_command="1"
                         panel_visibility="default"
                         repeat_command="1">
        <CompositeTreeDomain mode="leaves" name="tree">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </CompositeTreeDomain>
        <Documentation>This property lists the ids of the blocks to extract
          from the input multiblock dataset.</Documentation>
        <Hints>
          <!-- we don't want to show this property, except for MBs. -->
          <PropertyWidgetDecorator type="InputDataTypeDecorator"
            mode="visibility" name="vtkMultiBlockDataSet" />
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetFieldAssociation"
                         default_values="0"
                         name="AttributeType"
                         number_of_elements="1">
        <Documentation>Select the attribute data to render.</Documentation>
        <FieldDataDomain enable_field_data="1"
                         name="enum">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </FieldDataDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseIndexForXAxis"
                         default_values="1"
                         name="UseIndexForXAxis"
                         number_of_elements="1">
        <ChartUseIndexForAxisDomain name="bool">
          <RequiredProperties>
            <Property function="ArraySelection" name="XArrayName" />
          </RequiredProperties>
        </ChartUseIndexForAxisDomain>
        <Documentation>When set, the array index will be used for X axis,
        otherwise the array identified by XArrayName will be
        used.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetXAxisSeriesName"
                            default_values=""
                            name="XArrayName"
                            number_of_elements="1">
        <Documentation>Set the array to use on X axis. This is used only when
        UseIndexForXAxis is set to 0.</Documentation>
        <ChartSeriesListDomain name="array_list"
                              hide_partial_arrays="1">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
          </RequiredProperties>
        </ChartSeriesListDomain>
        <Hints>
          <!-- the widget for this property is only enabled, when
          UseIndexForXAxis is unchecked. -->
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
            <Property name="UseIndexForXAxis" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <PropertyGroup label="X Axis Parameters">
        <Property name="UseIndexForXAxis" />
        <Property name="XArrayName" />
      </PropertyGroup>
      <StringVectorProperty command="SetSeriesVisibility"
                            element_types="2 0"
                            name="SeriesVisibility"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            clean_command="ClearSeriesVisibilities">
        <Documentation>Set the series visibility.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="visibility">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
        <Hints>
          <!-- when present, the SeriesEditor widget will allow user to
          re-order the series which will affect the rendered plot -->
          <SeriesEditor supports_reordering="1" />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty command="SetLabel"
                            clean_command="ClearLabels"
                            element_types="2 2"
                            name="SeriesLabel"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series labels.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="label">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetColor"
                            clean_command="ClearColors"
                            element_types="2 1 1 1"
                            name="SeriesColor"
                            number_of_elements_per_command="4"
                            repeat_command="1">
        <Documentation>Set the series line/bar color.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="color">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetOpacity"
                            clean_command="ClearOpacities"
                            element_types="2 1"
                            name="SeriesOpacity"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series line/bar opacity.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="1.0">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetAxisCorner"
                            clean_command="ClearAxisCorners"
                            element_types="2 0"
                            name="SeriesPlotCorner"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series axis corner.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="0">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <!--
          Set the palette SelectionColor color to all the plots in the chart.
        -->
      <DoubleVectorProperty command="SetSelectionColor"
                            default_values="1.0 0.0 1.0"
                            name="Color"
                            number_of_elements="3"
                            panel_visibility="never">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="SelectionColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <SubProxy command="SetSelectionRepresentation">
        <!--
          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.
        -->
        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
          <InputProperty command="SetInputConnection"
                         name="SelectionInput"/>
        </RepresentationProxy>
      </SubProxy>

      <StringVectorProperty command="SetSeriesLabelPrefix"
                            name="SeriesLabelPrefix"
                            number_of_elements="1"
                            default_value=""
                            panel_visibility="advanced">
      <Documentation>
        Specify a string to prefix to the **SeriesLabel** (**Legend Name**) for each
        of series being plotted. This will get prefixed to the labels (legend names) specified
        for each of the series individually via the **Series Parameters**.
      </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="LastPresetName"
                            number_of_elements="1"
                            default_values="Spectrum"
                            panel_visibility="never">
      <Documentation>Dummy property containing last color preset name.
        The property widget can set it when a preset is applied, and the domain can read it when a default color is requested.</Documentation>
      </StringVectorProperty>
      <!-- End of XYChartRepresentationBase -->
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              class="vtkPVHistogramChartRepresentation"
                              name="HistogramChartRepresentation"
                              processes="client|dataserver|renderserver">
      <Documentation>Representation used by XYHistogramChartView.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
        <InputArrayDomain attribute_type="any" name="input_array" />
      </InputProperty>
      <StringVectorProperty animateable="0"
                            command="SetInputArrayToProcess"
                            element_types="0 0 0 0 2"
                            name="SelectInputArray"
                            number_of_elements="5">
        <ArrayListDomain attribute_type="Scalars"
                         name="array_list">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </ArrayListDomain>
        <Documentation>This property indicates the name of the array from which
        to compute the histogram.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetUseColorMapping"
                         number_of_elements="1"
                         default_values="0"
                         name="UseColorMapping"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>
          Use color mapping for the histogram.
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetHistogramColor"
                            default_values="0 0 1"
                            name="HistogramColor"
                            number_of_elements="3"
                            panel_widget="color_selector"
                            panel_visibility="default">
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseColorMapping" function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
        <Documentation>Sets the color for the histograms.</Documentation>
      </DoubleVectorProperty>
      <ProxyProperty command="SetLookupTable"
                     name="LookupTable"
                     panel_visibility="never" >
        <Documentation>Sets the lookup table to use for scalar
        mapping.</Documentation>
        <ProxyGroupDomain name="groups">
          <Group name="lookup_tables" />
        </ProxyGroupDomain>
      </ProxyProperty>
      <SubProxy command="SetSelectionRepresentation">
        <!--
          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.
        -->
        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
               <!-- See vtkSMChartRepresentationProxy::SetPropertyModifiedFlag()
                    for the details on naming this property -->
          <InputProperty command="SetInputConnection"
                         name="OriginalSelectionInput"/>
        </RepresentationProxy>
      </SubProxy>

      <IntVectorProperty command="SetBinCount"
                         default_values="256"
                         name="BinCount"
                         number_of_elements="1">
        <IntRangeDomain max="1000"
                        min="1"
                        name="range" />
        <Documentation>The value of this property specifies the number of bins
        for the histogram.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetComponent"
                         default_values="0"
                         name="Component"
                         number_of_elements="1">
        <NumberOfComponentsDomain name="comps" enable_magnitude="1">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SelectInputArray" />
          </RequiredProperties>
        </NumberOfComponentsDomain>
        <Documentation>The value of this property specifies the array component
        from which the histogram should be computed.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetCenterBinsAroundMinAndMax"
                         default_values="0"
                         name="CenterBinsAroundMinAndMax"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>When set to true, first and last bin will be centered
          around the minimum and the maximum values of the data.
          By default, set to false.</Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="UseCustomBinRanges"
                                   value="0" />
          <!-- show this widget when UseCustomBinRanges==0 -->
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseCustomBinRanges"
                         default_values="0"
                         name="UseCustomBinRanges"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>When set to true, CustomBinRanges will be used instead
        of using the full range for the selected array. By default, set to
        false.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetCustomBinRanges"
                            default_values="0.0 100.0"
                            name="CustomBinRanges"
                            number_of_elements="2"
                            panel_visibility="advanced">
        <Documentation>Set custom bin ranges to use. These are used only when
        UseCustomBinRanges is set to true.</Documentation>
        <ArrayRangeDomain name="scalar_range">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
            <Property function="ArraySelection"
                      name="SelectInputArray" />
          </RequiredProperties>
        </ArrayRangeDomain>
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="UseCustomBinRanges" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetHistogramLineStyle"
                         name="HistogramLineStyle"
                         number_of_elements="1"
                         default_values="0"
                         panel_visibility="advanced">
         <Documentation>Set the line style to use for drawing a border around the histogram bins.
         </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="None" value="0" />
          <Entry text="Solid" value="1" />
          <Entry text="Dash" value="2" />
          <Entry text="Dot" value="3" />
          <Entry text="Dash Dot" value="4" />
          <Entry text="Dash Dot Dot" value="5" />
        </EnumerationDomain>
      </IntVectorProperty>
      <Hints>
        <InitializationHelper class="vtkSMXYChartRepresentationInitializationHelper" />
      </Hints>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy class="vtkPVParallelCoordinatesRepresentation"
                              name="ParallelCoordinatesRepresentation"
                              processes="client|dataserver|renderserver">
      <Documentation>Representation used by
      ParallelCoordinatesChartView.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCompositeDataSetIndex"
                         default_values="1"
                         name="CompositeDataSetIndex"
                         number_of_elements="1">
        <Documentation>In case of Composite datasets, set the flat index of the
        dataset to pass. The flat index must point to a non-empty,
        non-composite dataset for anything to be passed through. If the input
        is not a composite dataset, then this index is ignored.</Documentation>
        <CompositeTreeDomain mode="leaves"
                             name="tree">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </CompositeTreeDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetFieldAssociation"
                         default_values="0"
                         name="FieldAssociation"
                         number_of_elements="1">
        <Documentation>Select the attribute data to pass.</Documentation>
        <FieldDataDomain enable_field_data="1"
                         name="enum">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </FieldDataDomain>
      </IntVectorProperty>

      <StringVectorProperty command="SetSeriesVisibility"
                            element_types="2 0"
                            name="SeriesVisibility"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            clean_command="ClearSeriesVisibilities">
        <Documentation>Set the series visibility.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="visibility">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="FieldAssociation" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
        <Hints>
          <!-- when present, the SeriesEditor widget will allow user to
          re-order the series which will affect the rendered plot -->
          <SeriesEditor supports_reordering="1" />
        </Hints>
      </StringVectorProperty>

      <DoubleVectorProperty command="SetColor"
                            name="Color"
                            number_of_elements="3"
                            default_values="0.0 0.0 0.0"
                            panel_widget="color_selector"
                            panel_visibility="advanced">
        <Documentation>Set the series line color.</Documentation>
        <DoubleRangeDomain name="range" min="0 0 0" max="1 1 1" />
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            name="Opacity"
                            number_of_elements="1"
                            default_values="0.1"
                            panel_visibility="advanced">
        <Documentation>Set the opacity of the lines.</Documentation>
        <DoubleRangeDomain name="range" min="0" max="1" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetLineThickness"
                         name="LineThickness"
                         number_of_elements="1"
                         default_values="2"
                         panel_visibility="advanced">
        <Documentation>Set the series line thickness.</Documentation>
        <IntRangeDomain name="range" min="1" max="10" />
      </IntVectorProperty>
      <IntVectorProperty command="SetLineStyle"
                         name="LineStyle"
                         number_of_elements="1"
                         default_values="1"
                         panel_visibility="advanced">
        <Documentation>Set the series line style.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="None" value="0" />
          <Entry text="Solid" value="1" />
          <Entry text="Dash" value="2" />
          <Entry text="Dot" value="3" />
          <Entry text="Dash Dot" value="4" />
          <Entry text="Dash Dot Dot" value="5" />
        </EnumerationDomain>
      </IntVectorProperty>

      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor" >
        <Property name="SeriesVisibility" function="SeriesVisibility" />
      </PropertyGroup>

      <PropertyGroup label="Styling">
        <Property name="Color" />
        <Property name="Opacity" />
        <Property name="LineThickness" />
        <Property name="LineStyle" />
      </PropertyGroup>

      <SubProxy command="SetSelectionRepresentation">
        <!--
          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.
        -->
        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
          <InputProperty command="SetInputConnection"
                         name="SelectionInput"/>
        </RepresentationProxy>
      </SubProxy>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy class="vtkPVBoxChartRepresentation"
                                 name="BoxChartRepresentation"
                                 processes="client|dataserver|renderserver">
      <Documentation>Representation used by BoxChartView.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCompositeDataSetIndex"
                         default_values="1"
                         name="CompositeDataSetIndex"
                         number_of_elements="1">
        <Documentation>In case of Composite datasets, set the flat index of the
        dataset to pass. The flat index must point to a non-empty,
        non-composite dataset for anything to be passed through. If the input
        is not a composite dataset, then this index is ignored.</Documentation>
        <CompositeTreeDomain mode="leaves"
                             name="tree">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </CompositeTreeDomain>
        <Hints>
          <!-- we don't want to show this property, except for MBs. -->
          <PropertyWidgetDecorator type="InputDataTypeDecorator"
            mode="visibility" name="vtkMultiBlockDataSet" />
        </Hints>
      </IntVectorProperty>
      <IntVectorProperty command="SetFieldAssociation"
                         default_values="0"
                         name="FieldAssociation"
                         number_of_elements="1">
        <Documentation>Select the attribute data to pass.</Documentation>
        <FieldDataDomain enable_field_data="1"
                         name="enum">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </FieldDataDomain>
      </IntVectorProperty>

      <StringVectorProperty command="SetSeriesVisibility"
                            element_types="2 0"
                            name="SeriesVisibility"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            clean_command="ClearSeriesVisibilities">
        <Documentation>Set the series visibility.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="visibility">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="FieldAssociation" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
        <Hints>
          <!-- when present, the SeriesEditor widget will allow user to
          re-order the series which will affect the rendered plot -->
          <SeriesEditor supports_reordering="1" />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty command="SetSeriesColor"
                            element_types="2 1 1 1"
                            name="SeriesColor"
                            number_of_elements_per_command="4"
                            repeat_command="1"
                            clean_command="ClearSeriesColors">
        <Documentation>Set the series box plot color.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="color">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="FieldAssociation" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>

      <DoubleVectorProperty command="SetColor"
                            name="Color"
                            number_of_elements="3"
                            default_values="0.0 0.0 0.0"
                            panel_widget="color_selector"
                            panel_visibility="advanced">
        <Documentation>Set the series line color.</Documentation>
        <DoubleRangeDomain name="range" min="0 0 0" max="1 1 1" />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetLineThickness"
                         name="LineThickness"
                         number_of_elements="1"
                         default_values="2"
                         panel_visibility="advanced">
        <Documentation>Set the series line thickness.</Documentation>
        <IntRangeDomain name="range" min="1" max="10" />
      </IntVectorProperty>
      <IntVectorProperty command="SetLineStyle"
                         name="LineStyle"
                         number_of_elements="1"
                         default_values="1"
                         panel_visibility="advanced">
        <Documentation>Set the series line style.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="None" value="0" />
          <Entry text="Solid" value="1" />
          <Entry text="Dash" value="2" />
          <Entry text="Dot" value="3" />
          <Entry text="Dash Dot" value="4" />
          <Entry text="Dash Dot Dot" value="5" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetLegend"
                         default_values="1"
                         name="Legend"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the legend.</Documentation>
      </IntVectorProperty>

      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor" >
        <Property name="SeriesVisibility"
                  function="SeriesVisibility" />
        <Property name="SeriesColor"
                  function="SeriesColor" />
      </PropertyGroup>

      <PropertyGroup label="Box Styling">
        <Property name="Color" />
        <Property name="LineThickness" />
        <Property name="LineStyle" />
        <Property name="Legend" />
      </PropertyGroup>

      <SubProxy command="SetSelectionRepresentation">
        <!--
          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.
        -->
        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
          <InputProperty command="SetInputConnection"
                         name="SelectionInput"/>
        </RepresentationProxy>
      </SubProxy>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              class="vtkPVPlotMatrixRepresentation"
                              name="PlotMatrixRepresentation"
                              processes="client|dataserver|renderserver">
      <Documentation>Representation used by PlotMatrixView.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetCompositeDataSetIndex"
                         default_values="1"
                         name="CompositeDataSetIndex"
                         number_of_elements="1">
        <Documentation>In case of Composite datasets, set the flat index of the
        dataset to pass. The flat index must point to a non-empty,
        non-composite dataset for anything to be passed through. If the input
        is not a composite dataset, then this index is ignored.</Documentation>
        <CompositeTreeDomain mode="leaves"
                             name="tree">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
          <Hints>
            <!-- we don't want to show this property, except for MBs. -->
            <PropertyWidgetDecorator type="InputDataTypeDecorator"
              mode="visibility" name="vtkMultiBlockDataSet" />
          </Hints>
        </CompositeTreeDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetFieldAssociation"
                         default_values="0"
                         name="FieldAssociation"
                         number_of_elements="1">
        <Documentation>Select the attribute data to pass.</Documentation>
        <FieldDataDomain enable_field_data="1"
                         name="enum">
          <RequiredProperties>
            <Property function="Input"
                      name="Input" />
          </RequiredProperties>
        </FieldDataDomain>
      </IntVectorProperty>

      <StringVectorProperty command="SetSeriesVisibility"
                            element_types="2 0"
                            name="SeriesVisibility"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            clean_command="ClearSeriesVisibilities">
        <Documentation>Set the series visibility.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="visibility">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="FieldAssociation" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
        <Hints>
          <!-- when present, the SeriesEditor widget will allow user to
          re-order the series which will affect the rendered plot -->
          <SeriesEditor supports_reordering="1" />
        </Hints>
      </StringVectorProperty>

      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor" >
        <Property name="SeriesVisibility" function="SeriesVisibility" />
      </PropertyGroup>

      <DoubleVectorProperty command="SetColor"
                            default_values="0 0 0"
                            name="ScatterPlotsColor"
                            number_of_elements="3"
                            panel_widget="color_selector"
                            panel_visibility="advanced">
        <Documentation>Sets the color.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetHistogramColor"
                            default_values="0 0 0"
                            name="HistogramColor"
                            number_of_elements="3"
                            panel_widget="color_selector"
                            panel_visibility="advanced">
        <Documentation>Sets the color for the histograms.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetMarkerStyle"
                         default_values="4"
                         name="ScatterPlotMarkerStyle"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>Property which sets the marker style for the scatter
        plots.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="None" value="0"/>
          <Entry text="Cross" value="1"/>
          <Entry text="Plus" value="2"/>
          <Entry text="Square" value="3"/>
          <Entry text="Circle" value="4"/>
          <Entry text="Diamond" value="5"/>
        </EnumerationDomain>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetMarkerSize"
                            default_values="3"
                            name="ScatterPlotMarkerSize"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>Property which sets the marker size for the scatter
        plots.</Documentation>
        <DoubleRangeDomain name="range" min="1" max="20" />
      </DoubleVectorProperty>

      <DoubleVectorProperty command="SetActivePlotColor"
                            default_values="0 0 0"
                            name="ActivePlotColor"
                            number_of_elements="3"
                            panel_widget="color_selector"
                            panel_visibility="advanced">
        <Documentation>Sets the color for the active plot.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetActivePlotMarkerStyle"
                         default_values="4"
                         name="ActivePlotMarkerStyle"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>Property which sets the marker style for the active
        plot.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="None" value="0"/>
          <Entry text="Cross" value="1"/>
          <Entry text="Plus" value="2"/>
          <Entry text="Square" value="3"/>
          <Entry text="Circle" value="4"/>
          <Entry text="Diamond" value="5"/>
        </EnumerationDomain>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetActivePlotMarkerSize"
                            default_values="5"
                            name="ActivePlotMarkerSize"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <Documentation>Property which sets the marker size for the active
        plots.</Documentation>
        <DoubleRangeDomain name="range" min="1" max="20" />
      </DoubleVectorProperty>

      <SubProxy command="SetSelectionRepresentation">
        <!--
          SelectionRepresentation proxy is used to convey the selection to view.
          We keep this separate as subproxy so that when the selection is
          modified, we don't have to update the representation as well, we can
          only update the SelectionRepresentation.
        -->
        <RepresentationProxy name="SelectionRepresentation"
               class="vtkChartSelectionRepresentation"
               processes="client|dataserver|renderserver">
          <InputProperty command="SetInputConnection"
                         name="SelectionInput"/>
        </RepresentationProxy>
      </SubProxy>

      <PropertyGroup label="Styling">
        <Property name="ScatterPlotsColor" />
        <Property name="HistogramColor" />
        <Property name="ScatterPlotMarkerStyle" />
        <Property name="ScatterPlotMarkerSize" />
      </PropertyGroup>

      <PropertyGroup label="Styling (Active Plot)">
        <Property name="ActivePlotColor" />
        <Property name="ActivePlotMarkerStyle" />
        <Property name="ActivePlotMarkerSize" />
      </PropertyGroup>
      <!-- End of PlotMatrixRepresentation -->
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              base_proxyname="XYChartRepresentationBase"
                              class="vtkXYChartRepresentation"
                              name="XYChartRepresentation"
                              processes="client|dataserver|renderserver"
                              post_creation="SetChartTypeToLine">
      <Documentation>Representation used by XYChartView.</Documentation>
      <StringVectorProperty command="SetLineStyle"
                            clean_command="ClearLineStyles"
                            element_types="2 0"
                            name="SeriesLineStyle"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series line style.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="1">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetLineThickness"
                            clean_command="ClearLineThicknesses"
                            element_types="str int"
                            name="SeriesLineThickness"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series line thickness.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="2">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetMarkerStyle"
                            clean_command="ClearMarkerStyles"
                            element_types="2 0"
                            name="SeriesMarkerStyle"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series marker style.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="0">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetMarkerSize"
                            clean_command="ClearMarkerSizes"
                            element_types="str double"
                            name="SeriesMarkerSize"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series marker size.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    hide_partial_arrays="0"
                                    default_mode="value"
                                    default_value="4">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>

      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor"
                     panel_visibility="default" >
        <Property name="SeriesVisibility"
                  function="SeriesVisibility" />
        <Property name="SeriesColor"
                  function="SeriesColor" />
        <Property name="SeriesOpacity"
                  function="SeriesOpacity" />
        <Property name="SeriesLineThickness"
                  function="SeriesLineThickness" />
        <Property name="SeriesLineStyle"
                  function="SeriesLineStyle" />
        <Property name="SeriesLabel"
                  function="SeriesLabel" />
        <Property name="SeriesMarkerSize"
                  function="SeriesMarkerSize" />
        <Property name="SeriesMarkerStyle"
                  function="SeriesMarkerStyle" />
        <Property name="SeriesPlotCorner"
                  function="SeriesPlotCorner"/>
        <Property name="LastPresetName"
                  function="LastPresetName"/>
      </PropertyGroup>

      <Hints>
        <InitializationHelper class="vtkSMXYChartRepresentationInitializationHelper" />
      </Hints>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              base_proxyname="XYChartRepresentationBase"
                              class="vtkXYChartRepresentation"
                              name="XYPointChartRepresentation"
                              processes="client|dataserver|renderserver"
                              post_creation="SetChartTypeToPoints">
      <Documentation>Representation used by XYChartView.</Documentation>
      <StringVectorProperty command="SetLineStyle"
                            clean_command="ClearLineStyles"
                            element_types="2 0"
                            name="SeriesLineStyle"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series line style.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    default_mode="value"
                                    default_value="0">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetLineThickness"
                            clean_command="ClearLineThicknesses"
                            element_types="str double"
                            name="SeriesLineThickness"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series line thickness.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    default_mode="value"
                                    default_value="1">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetMarkerStyle"
                            clean_command="ClearMarkerStyles"
                            element_types="2 0"
                            name="SeriesMarkerStyle"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series marker style.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    default_mode="value"
                                    default_value="2">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty command="SetMarkerSize"
                            clean_command="ClearMarkerSizes"
                            element_types="str double"
                            name="SeriesMarkerSize"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <Documentation>Set the series marker size.</Documentation>
        <ChartSeriesSelectionDomain name="array_list"
                                    default_mode="value"
                                    default_value="4">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="FieldDataSelection" name="AttributeType" />
            <Property function="CompositeIndexSelection" name="CompositeDataSetIndex" />
          </RequiredProperties>
        </ChartSeriesSelectionDomain>
      </StringVectorProperty>

      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor"
                     panel_visibility="default" >
        <Property name="SeriesVisibility"
                  function="SeriesVisibility" />
        <Property name="SeriesColor"
                  function="SeriesColor" />
        <Property name="SeriesOpacity"
                  function="SeriesOpacity" />
        <Property name="SeriesLineThickness"
                  function="SeriesLineThickness" />
        <Property name="SeriesLineStyle"
                  function="SeriesLineStyle" />
        <Property name="SeriesLabel"
                  function="SeriesLabel" />
        <Property name="SeriesMarkerStyle"
                  function="SeriesMarkerStyle" />
        <Property name="SeriesMarkerSize"
                  function="SeriesMarkerSize" />
        <Property name="SeriesPlotCorner"
                  function="SeriesPlotCorner"/>
      </PropertyGroup>
      <Hints>
        <InitializationHelper class="vtkSMXYChartRepresentationInitializationHelper" />
      </Hints>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              base_proxyname="XYChartRepresentation"
                              class="vtkQuartileChartRepresentation"
                              name="QuartileChartRepresentation"
                              processes="client|dataserver|renderserver"
                              post_creation="SetChartTypeToArea">
      <Documentation>Representation used by Quartile Chart View.</Documentation>
      <IntVectorProperty name="ShowQuartiles"
                         command="SetQuartileVisibility"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the area for the q1/q3 quartiles, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowRanges"
                         command="SetRangeVisibility"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the area for the min/max range, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowAverage"
                         command="SetAverageVisibility"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the line for the average value, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowMedian"
                         command="SetMedianVisibility"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the line for the median value, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowMinimum"
                         command="SetMinVisibility"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the line for the minimum value, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowMaximum"
                         command="SetMaxVisibility"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the line for the maximum value, if available.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="ShowSum"
                         command="SetSumVisibility"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether to render the line for the sum, if available.
        </Documentation>
      </IntVectorProperty>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <ChartRepresentationProxy base_proxygroup="representations"
                              base_proxyname="XYChartRepresentationBase"
                              class="vtkXYChartRepresentation"
                              name="XYBarChartRepresentation"
                              processes="client|dataserver|renderserver"
                              post_creation="SetChartTypeToBar">
      <Documentation>Representation used by XYBarChartView.</Documentation>
      <PropertyGroup label="Series Parameters"
                     panel_widget="SeriesEditor"
                     panel_visibility="default" >
        <Property name="SeriesVisibility"
                  function="SeriesVisibility" />
        <Property name="SeriesColor"
                  function="SeriesColor" />
        <Property name="SeriesOpacity"
                  function="SeriesOpacity" />
        <Property name="SeriesLabel"
                  function="SeriesLabel" />
        <Property name="SeriesPlotCorner"
                  function="SeriesPlotCorner"/>
      </PropertyGroup>
    </ChartRepresentationProxy>

    <!-- =================================================================== -->
    <SpreadSheetRepresentationProxy class="vtkSpreadSheetRepresentation"
                                    name="SpreadSheetRepresentation"
                                    processes="client|dataserver|renderserver">
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>Visibility of the representation.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>

      <StringVectorProperty name="Assembly"
        command="SetActiveAssemblyForSelectors"
        number_of_elements="1"
        panel_visibility="multiblock_inspector">
        <DataAssemblyListDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
          </RequiredProperties>
        </DataAssemblyListDomain>
        <Documentation>
          Select which assembly is used when specify selectors
          to choose blocks to show for composite datasets.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="BlockVisibilities"
        command="AddSelector"
        clean_command="ClearSelectors"
        repeat_command="1"
        number_of_elements_per_command="1"
        panel_visibility="multiblock_inspector"
        default_values="/">
        <DataAssemblyDomain name="data_assembly">
          <RequiredProperties>
            <Property function="Input" name="Input" />
            <Property function="ActiveAssembly" name="Assembly" />
          </RequiredProperties>
        </DataAssemblyDomain>
        <Documentation>
          For composite datasets, specify selectors to limit the view
          to a chosen subset of blocks.
        </Documentation>
      </StringVectorProperty>

      <PropertyGroup label="Blocks" panel_widget="DataAssemblyEditor"
        panel_visibility="multiblock_inspector">
        <Property name="Assembly" function="ActiveAssembly" />
        <Property name="BlockVisibilities" function="Selectors" />
        <Hints>
          <DataAssemblyPropertyWidget use_inputname_as_header="1" link_active_selection="1"/>
        </Hints>
      </PropertyGroup>

      <InputProperty command="SetInputConnection"
                     is_internal="1"
                     name="InternalInput1"
                     port_index="1">
        <Documentation>Internal property. Please don't touch
        this.</Documentation>
      </InputProperty>
      <!-- end of SpreadSheetRepresentation -->
    </SpreadSheetRepresentationProxy>
    <!-- =================================================================== -->
    <RepresentationProxy class="vtkTextSourceRepresentation"
                         name="TextSourceRepresentation"
                         processes="client|dataserver|renderserver"
                         si_class="vtkSIProxy">
      <Documentation>Representation proxy used to show text.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkTable" />
        </DataTypeDomain>
      </InputProperty>

      <IntVectorProperty command="SetTextPropMode"
                         default_values="0"
                         name="TextPropMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="2D Text Widget" value="0" />
          <Entry text="Flagpole Actor" value="1" />
          <Entry text="Billboard 3D Text" value="2" />
        </EnumerationDomain>
        <Documentation>
          Select how you want the text to be represented in the view.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetInteractivity"
                         default_values="1"
                         name="Interactivity"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether user should be able to interactively place the text in the view.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="TextPropMode"
                                   value="0" />

          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="enabled_state"
                                   property="WindowLocation"
                                   value="0" />
        </Hints>
      </IntVectorProperty>

      <SubProxy command="SetTextWidgetRepresentation">
        <Proxy name="TextWidgetRepresentation"
               proxygroup="representations"
               proxyname="TextWidgetRepresentation"></Proxy>
        <ExposedProperties>
          <!-- properties for Text Position-->
          <PropertyGroup name="TextPosition" label="Text Position" panel_widget="TextLocationEditor">
            <Property name="WindowLocation" />
            <Property name="Position" />
            <Property name="Position2" panel_visibility="never"/>
            <Property name="PositionInfo" />
            <Property name="Position2Info" />
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="TextPropMode"
                                       value="0" />
            </Hints>
          </PropertyGroup>
          <Property name="TextScaleMode" panel_visibility="never" default_values="0"/>
          <Property name="Resizable" panel_visibility="never"/>

          <!-- properties for Text -->
          <Property name="Orientation" panel_visibility="never"/>
          <PropertyGroup label="Font Properties" panel_widget="FontEditor">
            <Property name="Color" function="Color"/>
            <Property name="Opacity" function="Opacity"/>
            <Property name="FontFamily" function="Family"/>
            <Property name="FontFile" function="File"/>
            <Property name="Bold" function="Bold"/>
            <Property name="Italic" function="Italics" />
            <Property name="Shadow" function="Shadow"/>
            <Property name="FontSize" function="Size"/>
            <Property name="Justification" function="Justification" default_values="1" />
            <Property name="VerticalJustification" function="VerticalJustification"/>
          </PropertyGroup>

          <Property name="ShowBorder" label="Show Background" />
          <PropertyGroup label="Background Properties">
            <Property name="BackgroundColor" default_values="1 1 1 0.2"/>
            <Property name="BorderColor" panel_visibility="advanced"/>
            <Property name="BorderThickness" panel_visibility="advanced"/>
            <Property name="CornerRadius" panel_visibility="advanced"/>
            <Property name="Padding" panel_visibility="advanced" default_values="1" />

            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                    mode="visibility"
                                    property="TextPropMode"
                                    value="0" />

              <PropertyWidgetDecorator type="CompositeDecorator">
                <Expression type="or">
                  <PropertyWidgetDecorator type="GenericDecorator"
                    mode="visibility"
                    property="ShowBorder"
                    value="1" />

                  <PropertyWidgetDecorator type="GenericDecorator"
                    mode="visibility"
                    property="ShowBorder"
                    value="2" />
                </Expression>
              </PropertyWidgetDecorator>
            </Hints>

          </PropertyGroup>

          <PropertyGroup label="Multi Cell Properties">
            <Property name="LineSpacing" panel_visibility="advanced" />
            <Property name="CellOffset" panel_visibility="advanced" />
            <Property name="InteriorLinesWidth" panel_visibility="advanced" />
            <Property name="InteriorLinesColor" panel_visibility="advanced" />
            <Property name="InteriorLinesVisibility" panel_visibility="advanced" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

      <SubProxy command="SetFlagpoleLabel">
        <Proxy name="FlagpoleLabel"
               proxygroup="annotations"
               proxyname="FlagpoleLabel"></Proxy>
         <ShareProperties subproxy="TextWidgetRepresentation">
           <Exception name="Orientation" />
           <Exception name="WindowLocation" />
           <Exception name="Position" />
           <Exception name="Position2" />
           <Exception name="PositionInfo" />
           <Exception name="Position2Info" />
           <Exception name="TextScaleMode" />
           <Exception name="Resizable" />
         </ShareProperties>
        <ExposedProperties>
          <!-- properties for Text -->
          <PropertyGroup label="Flagpole Properties">
            <Property name="BasePosition" />
            <Property name="TopPosition" />
            <Property name="FlagSize" />
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="TextPropMode"
                                       value="1" />
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

      <SubProxy command="SetBillboardTextActor">
        <Proxy name="BillboardTextActor3D"
               proxygroup="annotations"
               proxyname="BillboardTextActor3D"></Proxy>
         <ShareProperties subproxy="TextWidgetRepresentation">
           <Exception name="Orientation" />
           <Exception name="WindowLocation" />
           <Exception name="Position" />
           <Exception name="Position2" />
           <Exception name="PositionInfo" />
           <Exception name="Position2Info" />
           <Exception name="TextScaleMode" />
           <Exception name="Resizable" />
         </ShareProperties>
        <ExposedProperties>
          <!-- properties for Text -->
          <PropertyGroup label="Billboard Position" panel_widget="InteractiveHandle">
            <Property function="WorldPosition" name="BillboardPosition" />
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="TextPropMode"
                                       value="2" />
            </Hints>
          </PropertyGroup>
          <PropertyGroup label="Billboard Properties">
            <Property name="DisplayOffset" />
            <Hints>
              <PropertyWidgetDecorator type="GenericDecorator"
                                       mode="visibility"
                                       property="TextPropMode"
                                       value="2" />
            </Hints>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <!-- End of TextSourceRepresentation -->
    </RepresentationProxy>
    <!-- =================================================================== -->
    <RepresentationProxy class="vtkRulerSourceRepresentation"
                         name="RulerSourceRepresentation"
                         processes="client|dataserver|renderserver"
                         si_class="vtkSIProxy">
      <Documentation>Representation proxy used to show a ruler.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <StringVectorProperty command="SetLabelFormat"
                            default_values="%6.3g"
                            name="LabelFormat"
                            number_of_elements="1">
        <Documentation>
          This should be a printf-style format string. You can do things
          like limit the number of significant digits, add prefixes/suffixes,
          basically anything that printf can do. An empty string or a string
          without the % symbol results in no label.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty name="Scale"
        command="SetScale"
        number_of_elements="1"
        default_values="1.">
        <Documentation>
          Scale factor applied to the global coordinate distance. Used to convert between the units used in the data set global coordinate distance to desired units. Example: convert from inches to centimeters by setting this value to 0.3937.
        </Documentation>
        <DoubleRangeDomain name="range" min="0" />
      </DoubleVectorProperty>

      <IntVectorProperty name="RulerMode"
        command="SetRulerMode"
        number_of_elements="1"
        default_values="0">
        <Documentation>
          Check to enable "ruler mode", where ticks are placed at increments
          defined by the Graduation property.
        </Documentation>
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <IntVectorProperty name="NumberOfTicks"
        command="SetNumberOfRulerTicks"
        number_of_elements="1"
        default_values="5">
        <Documentation>
          Specify the number of major ruler ticks. Note: the number of ticks is the number between the two handle endpoints.
        </Documentation>
        <IntRangeDomain name="range" min="1" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="RulerMode"
                                   value="0" />
        </Hints>
      </IntVectorProperty>

      <DoubleVectorProperty name="Graduation"
        command="SetRulerDistance"
        number_of_elements="1"
        default_values="1.">
        <Documentation>
          Specify the graduation, or the spacing of the ruler tick marks. Spacing is defined in the scaled global coordinate distance (see the Scale property). For example, if data is defined in terms of inches and the Scale property is set to display distances in centimeters, this property defines the spacing of tick marks in terms of centimeters.
        </Documentation>
        <DoubleRangeDomain name="range" min="0" />
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="RulerMode"
                                   value="1" />
        </Hints>
      </DoubleVectorProperty>

      <PropertyGroup label="Label Properties">
        <Property name="RulerMode" />
        <Property name="LabelFormat" />
        <Property name="NumberOfTicks" />
        <Property name="Graduation" />
        <Property name="Scale" />
      </PropertyGroup>

      <DoubleVectorProperty command="SetAxisColor"
                            default_values="0 1 0"
                            name="AxisColor"
                            number_of_elements="3"
                            panel_widget="color_selector_with_palette">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Documentation>Set the color of the ruler.</Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty command="SetAxisLineWidth"
                            default_values="2"
                            name="AxisLineWidth"
                            number_of_elements="1">
        <DoubleRangeDomain min="0" name="range" />
        <Documentation>Set the line width of the ruler in screen units.</Documentation>
      </DoubleVectorProperty>

      <PropertyGroup label="Axis Display Properties">
        <Property name="AxisColor" />
        <Property name="AxisLineWidth" />
      </PropertyGroup>

      <SubProxy command="SetTextProperty">
        <Proxy name="TextProperty"
               proxygroup="properties"
               proxyname="TextProperty"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Font Properties" panel_widget="FontEditor">
            <Property name="Color" function="Color"/>
            <Property name="Opacity" function="Opacity"/>
            <Property name="FontFamily" function="Family"/>
            <Property name="FontFile" function="File"/>
            <Property name="Bold" function="Bold"/>
            <Property name="Italic" function="Italics" />
            <Property name="Shadow" function="Shadow"/>
            <Property name="FontSize" function="Size"/>
            <Property name="Justification" function="Justification"/>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

      <!-- End of RulerSourceRepresentation -->
    </RepresentationProxy>
    <!-- =================================================================== -->
    <RepresentationProxy class="vtkProtractorRepresentation"
                         name="ProtractorRepresentation"
                         processes="client|dataserver|renderserver"
                         si_class="vtkSIProxy">
      <Documentation>
        Representation proxy used to show an angle.
        The angle is defined by 3 points and the representation shows 2 lines
        as well as the angle value formed by these 2 lines as a label.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
      </InputProperty>

      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <DoubleVectorProperty command="SetLineColor"
                            default_values="0 1 0"
                            name="LineColor"
                            number_of_elements="3"
                            panel_widget="color_selector_with_palette">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Documentation>Set the color of the ruler.</Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty command="SetLineThickness"
                            default_values="2"
                            name="LineThickness"
                            number_of_elements="1" >
        <DoubleRangeDomain max="10" min="1" name="range" />
        <Documentation>Set the thickness of all lines.</Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty command="SetArrowStyle"
                         default_values="0"
                         name="ArrowStyle"
                         panel_visibility="advanced"
                         number_of_elements="1">
        <Documentation>Set the style of the tip of each axes.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Filled" value="0" />
          <Entry text="Empty" value="1" />
          <Entry text="Hollow" value="2" />
        </EnumerationDomain>
      </IntVectorProperty>

      <SubProxy command="SetTextProperty">
        <Proxy name="TextProperty"
               proxygroup="properties"
               proxyname="TextProperty"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Font Properties" panel_widget="FontEditor">
            <Property name="FontSize" function="Size" />
            <Property name="Color" function="Color"/>
            <Property name="Opacity" function="Opacity"/>
            <Property name="FontFamily" function="Family"/>
            <Property name="FontFile" function="File"/>
            <Property name="Bold" function="Bold"/>
            <Property name="Italic" function="Italics" />
            <Property name="Shadow" function="Shadow"/>
            <Property name="Justification" function="Justification" default_values="1"/>
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>

      <StringVectorProperty command="SetLabelFormat"
                            default_values="%6.3g"
                            name="LabelFormat"
                            panel_visibility="advanced"
                            number_of_elements="1">
        <Documentation>
          This should be a printf-style format string. You can do things
          like limit the number of significant digits, add prefixes/suffixes,
          basically anything that printf can do. An empty string or a string
          without the % symbol results in no label.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty command="SetAngleScale"
                            default_values="1"
                            name="AngleScale"
                            panel_visibility="advanced"
                            number_of_elements="1">
        <Documentation>
          Set the scale factor from degrees. The label will be defined in terms of the scaled space. For
          example, to use radians in the label set the scale factor to pi/180.
        </Documentation>
      </DoubleVectorProperty>

      <!-- End of ProtractorRepresentation -->
    </RepresentationProxy>
    <!-- =================================================================== -->
    <RepresentationProxy class="vtkProgressBarSourceRepresentation"
                         name="ProgressBarSourceRepresentation"
                         processes="client|dataserver|renderserver"
                         si_class="vtkSIProxy">
      <Documentation>Representation proxy used to show ProgressBar.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <Documentation>Data input for the representation.</Documentation>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkTable" />
        </DataTypeDomain>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetForceUseCache"
                         default_values="0"
                         is_internal="1"
                         name="ForceUseCache"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetForcedCacheKey"
                            default_values="none"
                            is_internal="1"
                            name="ForcedCacheKey"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>Typically UseCache and CacheKey are updated by the View
        and representations cache based on what the view tells it. However in
        some cases we may want to force a representation to cache irrespective
        of the view (e.g. comparative views). In which case these ivars can up
        set. If ForcedCacheKey is true, it overrides UseCache and CacheKey.
        Instead, ForcedCacheKey is used.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetInteractivity"
                         default_values="1"
                         name="Interactivity"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether user should be able to interactively place the progressBar in the view.
        </Documentation>
      </IntVectorProperty>
      <SubProxy command="SetProgressBarWidgetRepresentation">
        <Proxy name="ProgressBarWidgetRepresentation"
               proxygroup="representations"
               proxyname="ProgressBarWidgetRepresentation"></Proxy>
        <ExposedProperties>
          <Property name="Position" />
          <Property name="Position2" panel_visibility="never"/>
          <Property name="PositionInfo" />
          <Property name="Position2Info" />
          <Property name="ProgressBarColor"/>
          <Property name="SecondaryProgressBarColor"/>
          <Property name="DrawBackground"/>
        </ExposedProperties>
      </SubProxy>
      <!-- End of ProgressBarSourceRepresentation -->
    </RepresentationProxy>
    <!-- =================================================================== -->
    <RepresentationProxy class="vtkLogoSourceRepresentation"
                         name="LogoSourceRepresentation"
                         processes="client|dataserver|renderserver"
                         si_class="vtkSIProxy">
      <Documentation>Representation proxy used to show a Logo.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>ImageData input for the representation.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetInteractivity"
                         default_values="1"
                         name="Interactivity"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether user should be able to interactively place the Logo in the view.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetInteractiveScaling"
                         default_values="1"
                         name="InteractiveScaling"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Set whether user should be able to interactively scale the Logo in the view (when checked)
          or choose the scaling in the properties panel (when unchecked).
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetImageScale"
                            default_values="0.08"
                            name="ImageScale"
                            number_of_elements="1">
        <DoubleRangeDomain max="2"
                           min="0.01"
                           name="range" />
        <Hints>
          <PropertyWidgetDecorator type="ShowWidgetDecorator">
            <Property name="InteractiveScaling"
                      function="boolean_invert" />
          </PropertyWidgetDecorator>
        </Hints>
        <Documentation>
          Scale of the logo, relative to render view height. Ratio is preserved.
        </Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetOpacity"
                            default_values="1.0"
                            name="Opacity"
                            number_of_elements="1">
        <DoubleRangeDomain max="1"
                           min="0"
                           name="range" />
      </DoubleVectorProperty>

       <SubProxy command="SetLogoWidgetRepresentation">
        <Proxy name="LogoWidgetRepresentation"
               proxygroup="representations"
               proxyname="LogoWidgetRepresentation"></Proxy>
        <ExposedProperties>
          <Property name="ShowBorder" />
          <Property name="BorderThickness" />
          <Property name="BorderColor" />
          <PropertyGroup name="LogoPosition" label="Logo Position" panel_widget="TextLocationEditor">
            <Property name="WindowLocation" />
            <Property name="Position" />
            <Property name="Position2" panel_visibility="never"/>
            <Property name="PositionInfo" />
            <Property name="Position2Info" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <!-- End of LogoSourceRepresentation -->
    </RepresentationProxy>
    <!-- =================================================================== -->
    <Proxy class="vtkPVFrustumActor"
           name="FrustumWidget"
           processes="client|dataserver|renderserver">
      <Documentation>Representation for a frustum</Documentation>
      <DoubleVectorProperty argument_is_array="1"
                            command="SetFrustum"
                            default_values="0 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 1 1"
                            name="Frustum"
                            number_of_elements="24">
        <Documentation>Specify the corners of the outline when in Oriented
        mode, the values are supplied as 8*3 double values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetVisibility"
                         default_values="1"
                         name="Visibility"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <DoubleVectorProperty command="SetColor"
                            default_values="0.5 0.5 0.5"
                            name="Color"
                            number_of_elements="3">
        <DoubleRangeDomain max="1 1 1"
                           min="0 0 0"
                           name="range" />
        <Hints>
          <PropertyLink group="settings" proxy="ColorPalette" property="TextAnnotationColor" unlink_if_modified="1" />
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetLineWidth"
                            default_values="3.0"
                            name="LineWidth"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
      </DoubleVectorProperty>
      <!-- End of FrustumWidget -->
    </Proxy>

    <!-- ================================================================== -->
    <RepresentationProxy name="GeometrySliceRepresentation"
                base_proxygroup="internal_representations"
                base_proxyname="SurfaceRepresentationBase"
                class="vtkGeometrySliceRepresentation"
                processes="client|renderserver|dataserver">
      <Documentation>
        GeometrySliceRepresentation add support to show multiple slices in the view.
        This is used by CompositeMultiSliceRepresentation.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>Set the input to the representation.</Documentation>
      </InputProperty>

      <IntVectorProperty name="ShowOutline"
        command="SetShowOutline"
        number_of_elements="1"
        default_values="0">
        <Documentation>
          Check to show data outline when showing "Slices".
        </Documentation>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
    </RepresentationProxy>

    <!-- ================================================================ -->
    <PVRepresentationProxy name="CompositeMultiSliceRepresentation"
                           base_proxygroup="representations"
                           base_proxyname="GeometryRepresentation"
                           class="vtkPVCompositeRepresentation"
                           processes="client|renderserver|dataserver" >
       <RepresentationType  subproxy="GeometrySliceRepresentation"
         text="Slices" subtype="Surface"/>
       <SubProxy>
         <Proxy name="GeometrySliceRepresentation"
           proxygroup="representations"
           proxyname="GeometrySliceRepresentation">
         </Proxy>
         <ShareProperties subproxy="SurfaceRepresentation">
           <Exception name="Input" />
           <Exception name="Visibility" />
         </ShareProperties>
         <ExposedProperties>
           <PropertyGroup label="Slices Parameters">
             <Property name="ShowOutline"
                       panel_visibility="advanced"
                       panel_visibility_default_for_representation="slices" />
           </PropertyGroup>
         </ExposedProperties>
       </SubProxy>
    </PVRepresentationProxy>

    <!-- ================================================================ -->
    <PVRepresentationProxy name="CompositeOrthographicSliceRepresentation"
                           base_proxygroup="representations"
                           base_proxyname="CompositeMultiSliceRepresentation"
                           class="vtkPVCompositeOrthographicSliceRepresentation"
                           processes="client|renderserver|dataserver">
      <SubProxy command="SetSliceRepresentation0">
        <Proxy name="GeometrySliceRepresentationX"
               proxygroup="representations"
               proxyname="GeometrySliceRepresentation">
        </Proxy>
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
      </SubProxy>
      <SubProxy command="SetSliceRepresentation1">
        <Proxy name="GeometrySliceRepresentationY"
               proxygroup="representations"
               proxyname="GeometrySliceRepresentation">
        </Proxy>
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
      </SubProxy>
      <SubProxy command="SetSliceRepresentation2">
        <Proxy name="GeometrySliceRepresentationZ"
               proxygroup="representations"
               proxyname="GeometrySliceRepresentation">
        </Proxy>
        <ShareProperties subproxy="SurfaceRepresentation">
          <Exception name="Input" />
          <Exception name="Visibility" />
        </ShareProperties>
      </SubProxy>
    </PVRepresentationProxy>
  </ProxyGroup>
</ServerManagerConfiguration>
