# How to use Apache as front-end

## Introduction

First of all, as you may know Apache does not
support by default Web sockets and therefore
shouldn't be concidered to be the best approach
for a ParaViewWeb deployment. But as many users
requires such front-end, this document explain
step by step how to setup such environment.

## Components overview

A web application that relies on ParaViewWeb is
composed of 2 to 3 components. The reason to
go from 2 to 3, simply depends on the type of
deployment and therefore usage that we want to
achieve.

The 2 main components are:

1. The web socket server that is used to control the
ParaView engine.
2. Some static content that contains the JavaScript
and web pages that compose the Web application which
need to be delivered via standard HTTP.

But in such setup the ParaView process became the web server
and only a shared visualization can be achieved.
In order to support multiple clients and therefore concurrent
visualizations, we need a third component that will act as
a session manager by starting and stoping the ParaView
sessions as well as communication forwarder for the web
socket.

The following image illustrate what a multi-user deployment
could look like behind an Apache front-end where a Java
web server is used to handle the ParaView processes.

{@img images/ParaViewWeb-Apache.png Alt text}

## Installation

### ParaView

ParaView need to be build from source in order to support
the latest ParaViewWeb features.
This section will assume a Unix based environment and will
go over all the command lines needed to achieve configuration,
build and installation of ParaView components in order to be
used in a ParaViewWeb deployment.

    $ cd ParaViewWeb
    $ mkdir ParaView
    $ cd ParaView
    $ mkdir build install
    $ git clone git://paraview.org/stage/ParaView.git src
    $ cd src
    $ git checkout -b ParaViewWeb2.0 origin/ParaViewWeb2.0
    $ git submodule update --init
    $ cd ../build
    $ ccmake ../src
    
        PARAVIEW_ENABLE_PYTHON      ON
        PARAVIEW_BUILD_QT_GUI       OFF
        Module_vtkParaViewWeb       ON
        CMAKE_INSTALL_PREFIX        /.../ParaView/install
    
    $ make
    $ make install

### ParaViewWeb

ParaViewWeb is in that case composed of Python script (Web server),
a JavaScript library and a sample Web application.
In order to install it download the following archive ({@link data/ParaViewWeb.tgz})

    $ cd ParaViewWeb 
    $ mkdir web-server
    $ cd web-server
    $ curl http://pvw.kitware.com/guides/apache_setup/data/ParaViewWeb.tgz -O
    $ tar xvzf ParaViewWeb.tgz

### <a id="sessionmgr"/></a> Session Manager

ParaViewWeb as an external project that has been written in Java that is using Jetty
which enable a ParaViewWeb session management that is compliant to the distributed
JavaScript library.

Configuration file for the Session Manager executable: (config.properties)

    pw.web.port=9000
    pw.web.js.dir=/home/pvw/ParaViewWeb/www/js
    pw.web.content.dir=/home/pvw/ParaViewWeb/www/
    
    pw.logging.dir=/home/pvw/ParaViewWeb/logs
    pw.logging.level=DEBUG
    
    pw.resources=localhost:9001-9100
    
    pw.proxy.adapter=com.kitware.paraviewweb.external.JsonFileProxyConnectionAdapter
    pw.proxy.adapter.file=/home/pvw/ParaViewWeb/session-mapping.json
    
    pw.demo.cmd.run.dir=/home/pvw/ParaViewWeb/server-content/python
    pw.demo.cmd=/home/pvw/ParaViewWeb/ParaView/build/bin/pvpython simple_server.py --port=PORT
    pw.demo.cmd.map=PORT:getPort
    
    pw.wamp.url.generator=com.kitware.paraviewweb.external.GenericWampURLGenerator
    pw.wamp.url.generator.pattern=ws://pvw.kitware.com/proxy?sessionId=SESSION_ID

Shell script used to start the Session Manager

    export DISPLAY=:0.0
    export CLASSPATH=jetty-session-manager-lib-1.0-SNAPSHOT.jar:dependency/gson-2.2.2.jar:dependency/jetty-continuation-7.2.0.v20101020.jar:dependency/jetty-http-7.2.0.v20101020.jar:dependency/jetty-io-7.2.0.v20101020.jar:dependency/jetty-server-7.2.0.v20101020.jar:dependency/jetty-util-7.2.0.v20101020.jar
    java -cp $CLASSPATH -Dpw-config=config.properties com.kitware.paraviewweb.handler.ParaViewWebHandler

### Python 2.7 ###

The websocket proxy requires Python 2.7 with the following packages need to be install:

#### 1. AutobahnPython ####

Download [Zip](http://pypi.python.org/pypi/autobahn)

    $ unzip autobahn-0.5.9.zip
    $ cd autobahn-0.5.9
    $ python setup.py build
    $ sudo python setup.py install

#### 2. pywebsockets ####

Download [tarball](http://code.google.com/p/pywebsocket/downloads)

    $ tar xfz mod_pywebsocket-0.7.8.tar.gz 
    $ cd pywebsocket-0.7.8/src/
    $ python setup.py build
    $ sudo python setup.py install

### Apache ###

To proxy websocket traffic through Apache a custom proxy is required. The proxy can be download at the following link ({@link data/ApacheWebsocketProxy.tgz})

    $ tar xfz ApacheWebsocketProxy.tgz

The following modules need to be installed/configured to enable the proxy code.

#### mod_python ####

mod_pywebsocket is used by the websocket proxy to accept incoming websocket connections, it requires mod_python.

    $ sudo apt-get install libapache2-mod-python

#### mod_pywebsocket ####

To enable the mod_pywebsocket module add the following lines to /etc/apache2/apache2.conf

    PythonPath "sys.path+['/usr/local/lib/python2.7/dist-packages/mod_pywebsocket']"
    PythonOption mod_pywebsocket.handler_root <path_to_apache_websocket_proxy_code>
    PythonHeaderParserHandler mod_pywebsocket.headerparserhandler

#### Configuring the proxy ####

The following entries need to be added to the /etc/apache2/sites-available/pvw configuration file.

    AddHandler mod_python .py
    PythonHandler mod_python.publisher

The configuration for the proxy is held in proxy.json, that looks something like this:

    {
      "loggingConfiguration": "/home/pvw/proxy/logging.json",
      "connectionReaper": {
        "reapInterval": 300,
        "connectionTimeout": 3600
      },
      "sessionMappingFile": "/home/pvw/proxy/session.map"
    }

* *loggingConfigurations* - This is the path to the JSON file containing the Python logging configuration.
* *connectionReaper.reapInterval* - This is the interval at which the connection reaper is run at in seconds.
* *connectionReaper.connectionTimeout* - This is the length of time a connection can remain inactive before the connection will be cleaned up.
* *sessionMappingFile* - This is the session mapping file produced by the session manager. It maps session IDs to connection endpoints,
    the proxy uses this to know where to route sessions. See Session manager configuration for details 

Place the proxy.json configuration file in the home directory of the user used to run apache, usally /var/www

#### Virtual host configuring ####

The virtual host should be look something like the following

    <VirtualHost *:80>
        ServerName  your.paraviewweb.hostname
        ServerAdmin your@email.com
    
        # Static content directory (js, html, png, css)
        DocumentRoot /home/pvw/ParaViewWeb/www
        
        # Jetty Session Manager
        ProxyPass        /paraview  http://localhost:9000/paraview
        ProxyPassReverse /paraview  http://localhost:9000/paraview
    
        # Proxy web socket to ParaViewWeb processes
        <Directory /home/pvw/ParaViewWeb/www/websockets>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
                AddHandler mod_python .py
                PythonHandler mod_python.publisher
                PythonDebug On
        </Directory>
     
        # Log management
        LogLevel warn
        ErrorLog  /home/pvw/ParaViewWeb/logs/pvw-error.log`
        CustomLog /home/pvw/ParaViewWeb/logs/pvw-access.log combined
    </VirtualHost>
