# Application should exit when this script is finished.
Application ExitOnReturnOn

if {[info exists argc]} { 
    set argcm1 [expr $argc - 1]
    for {set i 0} {$i < $argcm1} {incr i} {
        if {[lindex $argv $i] == "-D" && $i < $argcm1} {
		set DataDir [lindex $argv [expr $i + 1]]
        }
    }
} 

# Open the AltIO package.
set kw(vtkTemp1) [Application GetMainWindow]
set kw(vtkTemp16) [$kw(vtkTemp1) GetMainView]
$kw(vtkTemp1) OpenPackage "$DataDir/Data/vtkAltIOPackage.xml"

# Create a non-trivial vtkPolyData.
set kw(vtkTemp243) [$kw(vtkTemp1) CreatePVSource SphereSource]
set kw(vtkTemp259) [$kw(vtkTemp243) GetPVWidget {Theta Resolution}]
$kw(vtkTemp259) SetValue 36
set kw(vtkTemp268) [$kw(vtkTemp243) GetPVWidget {Phi Resolution}]
$kw(vtkTemp268) SetValue 36
$kw(vtkTemp243) AcceptCallback
update

# Write the vtkPolyData.
set kw(vtkTemp295) [$kw(vtkTemp1) CreatePVSource ElevationFilter]
$kw(vtkTemp295) AcceptCallback
$kw(vtkTemp1) WriteVTKFile "sPolyData.xvtk"

# Delete the old pipeline.
$kw(vtkTemp295) DeleteCallback
$kw(vtkTemp243) DeleteCallback

# Read the vtkPolyData from the temporary file.
$kw(vtkTemp1) Open "sPolyData.xvtk"
set kw(vtkTemp337) [vtkTemp1 GetCurrentPVSource]
update

# Fix the size of the image.
RenWin1 SetSize 300 300
RenWin1 Render
update

for {set i  1} {$i < [expr $argc - 1]} {incr i} {
    if {[lindex $argv $i] == "-C"} {
	source [lindex $argv [expr $i + 1]]
	$Application SetExitStatus [CompareImage [[Application GetMainWindow] GetMainView]]
    }
}

# Delete the temporary file.
catch { file delete -force "sPolyData.xvtk" }
