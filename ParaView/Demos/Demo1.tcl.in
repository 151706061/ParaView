if [info exists tmpPvDataDir] {
    set DataDir $tmpPvDataDir
} else {
    set DataDir "@PARAVIEW_DATA_ROOT@/Data"
}

set FoundFiles 1

if ![file exists $DataDir/combxy.bin] {
    vtkKWMessageDialog _adialog
    _adialog Create Application ""
    _adialog SetText "Could not find the data file combxyz.bin.\n This usually means that ParaView was not installed properly\n or that this script was loaded using 'Load Script' from the file menu."
    _adialog Invoke
    _adialog Delete
    set FoundFiles 0
}

if ![file exists $DataDir/combq.bin] {
    vtkKWMessageDialog _adialog
    _adialog Create Application ""
    _adialog SetText "Could not find the data file combq.bin. This usually means that ParaView was not install properly or that this script was loaded using 'Load Script' from the file menu."
    _adialog Invoke
    _adialog Delete
    set FoundFiles 0
}

if ![file exists $DataDir/blow.vtk] {
    _adialog Create Application ""
    _adialog SetText "Could not find the data file blow.vtk. This usually means that ParaView was not install properly or that this script was loaded using 'Load Script' from the file menu."
    _adialog Invoke
    _adialog Delete
    set FoundFiles 0
}

proc pvStopDemoAndExit {} {
    global pvDemoShouldStop pvDemoShouldExit
    set pvDemoShouldStop 1
    set pvDemoShouldExit 1
    set FoundFiles 0
}

wm protocol .paraview WM_DELETE_WINDOW {pvStopDemoAndExit}

proc SphereDemoInit {} {
    
    # hack to get the window.
    set pvWindow [lindex [vtkPVWindow ListInstances] 0]
    
    set sInt [$pvWindow GetSourceInterface "vtkSphereSource"]
    set pvSphere [$sInt CreateCallback]
    [$pvSphere GetVTKSource] SetThetaResolution 16
    $pvSphere UpdateParameterWidgets
    $pvSphere AcceptCallback
    
    set sInt2 [$pvWindow GetSourceInterface "vtkShrinkPolyData"]
    set pvShrink [$sInt2 CreateCallback]
    [$pvShrink GetVTKSource] SetShrinkFactor 0.9
    $pvShrink UpdateParameterWidgets
    $pvShrink AcceptCallback

    set eInt [$pvWindow GetSourceInterface "vtkElevationFilter"]
    set pvElevation [$eInt CreateCallback]
    $pvElevation AcceptCallback

    set eInt2 [$pvWindow GetSourceInterface "vtkExtractEdges"]
    set pvExtract [$eInt2 CreateCallback]
    $pvExtract AcceptCallback

    set extractOutput [$pvExtract GetNthPVOutput 0]
    $extractOutput ColorByProperty
    $extractOutput SetVisibility 0

    set elevOutput [$pvElevation GetNthPVOutput 0]
    $elevOutput SetVisibility 0

    return "$pvSphere $elevOutput $extractOutput"
}

proc SphereDemoRun { pvSphere elevOutput extractOutput } {

    global pvDemoShouldStop

    set pvWindow [lindex [vtkPVWindow ListInstances] 0]
    $pvWindow SetCurrentPVSource $pvSphere
    
    set camera [Ren1 GetActiveCamera]
    $camera SetPosition 0 0 3.41078
    $camera SetFocalPoint 0 0 0
    $camera SetViewUp 0 1 0
    $camera SetViewAngle 30
    $camera SetClippingRange 2.38825 4.70618
    
    $elevOutput SetVisibility 1
    $extractOutput SetVisibility 1
    
    for {set i 0} {$i < 100} {incr i 1} {
	set camera [Ren1 GetActiveCamera]
	$camera Azimuth 10
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }
    
    $elevOutput SetVisibility 0
    $extractOutput SetVisibility 0
    RenWin1 Render
}

proc CombustorDemoInit {} {
    global DataDir

    # hack to get the window.
    set pvWindow [lindex [vtkPVWindow ListInstances] 0]

    # Create the reader
    set pInt [$pvWindow GetSourceInterface "vtkPLOT3DReader"]
    set pvPlot3D [$pInt CreateCallback]
    [$pvPlot3D GetVTKSource] SetXYZFileName $DataDir/combxyz.bin
    [$pvPlot3D GetVTKSource] SetQFileName $DataDir/combq.bin
    $pvPlot3D UpdateParameterWidgets
    $pvPlot3D AcceptCallback
    
    # Create the contour filter
    set cInt [$pvWindow ContourCallback]
    $cInt AcceptCallback

    $pvWindow SetCurrentPVSource $pvPlot3D

    set eInt [$pvWindow GetSourceInterface "vtkExtractGrid"]
    set pvExtract [$eInt CreateCallback]
    
    [$pvExtract GetVTKSource] SetVOI 0 56 0 32 0 0 
    $pvExtract UpdateParameterWidgets
    $pvExtract AcceptCallback
    
    [$pvExtract GetNthPVOutput 0] SetVisibility 0

    set pvGlyph [$pvWindow GlyphCallback]
    $pvGlyph AcceptCallback
    
    [$pvGlyph GetNthPVOutput 0] ColorByProperty
    [$pvGlyph GetVTKSource] SetScaleFactor 3.0
    $pvGlyph UpdateParameterWidgets
    $pvGlyph AcceptCallback

    [$pvGlyph GetNthPVOutput 0] SetVisibility 0

    return "$cInt $pvPlot3D $pvExtract $pvGlyph"
}

proc AdjustContourValue { cnt val } {
    $cnt DeleteAllValues
    set entry [$cnt GetNewValueEntry]
    $entry SetValue $val
    $cnt AddValueCallback
    $cnt AcceptCallback
}


proc CombustorDemoRun {cInt pvPlot3D pvExtract pvGlyph} {

    global pvDemoShouldStop

    set cntOutput [$cInt GetNthPVOutput 0]

    set camera [Ren1 GetActiveCamera]
    $camera SetPosition -29.1076 -40.3242 38.8874
    $camera SetFocalPoint 8.255 0 29.7631
    $camera SetViewUp -0.00809309 0.227813 0.973671
    $camera SetViewAngle 30
    $camera SetClippingRange 34.7159 82.3051

    # Vary isosuface
    $cntOutput SetVisibility 1
    [$pvPlot3D GetNthPVOutput 0] SetVisibility 1
    
    set start 0.2
    set end 0.7
    set num 30
    set incr [expr ($end - $start)/$num]
    for {set i 0} {$i < $num} {incr i 1} {
	set val [expr $start + $i * $incr]
	AdjustContourValue $cInt $val 

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }
    
    # Rotate isosuface
    AdjustContourValue $cInt 0.3
    
    $cntOutput SetScalarBarVisibility 1
    $cntOutput SetScalarBarOrientationToHorizontal
    $cntOutput ColorByPointFieldComponent Momentum 0
    $cInt UpdateParameterWidgets
    
    for {set i 0} {$i < 102} {incr i 1} {
	$camera Azimuth 10
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }

    $cntOutput SetVisibility 0
    $cntOutput SetScalarBarVisibility 0

    # Here goes cut-plane (see end of this file)

    $camera SetPosition -28.8139 1.07506 33.8794
    $camera SetFocalPoint 26.5733 -0.117269 27.8723
    $camera SetViewUp 0.10793 0.00506272 0.994146
    $camera SetViewAngle 30
    $camera SetClippingRange 18.5955 61.8423

    [$pvExtract GetVTKSource] SetVOI 0 56 0 32 0 0 
    $pvExtract UpdateParameterWidgets
    $pvExtract AcceptCallback

    [$pvExtract GetNthPVOutput 0] SetVisibility 1
    

    RenWin1 Render

    for {set i 0} {$i < 24} {incr i 1} {
	[$pvExtract GetVTKSource] SetVOI 0 56 0 32 $i $i
	$pvExtract UpdateParameterWidgets
	$pvExtract AcceptCallback
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }
    
    for {set i 23} {$i >= 0} {incr i -1} {
	[$pvExtract GetVTKSource] SetVOI 0 56 0 32 $i $i
	$pvExtract UpdateParameterWidgets
	$pvExtract AcceptCallback
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }

    [$pvGlyph GetNthPVOutput 0] SetVisibility 1

    $camera SetPosition 36.8437 -0.196199 53.7392
    $camera SetFocalPoint -5.92921 -0.324064 18.022
    $camera SetViewUp -0.639592 -0.0625532 0.766165
    $camera SetViewAngle 30
    $camera SetClippingRange 15.0904 64.6074

    [$pvExtract GetVTKSource] SetVOI 0 0 0 32 3 20
    RenWin1 Render
    
    for {set i 1} {$i < 56} {incr i 1} {
	[$pvExtract GetVTKSource] SetVOI $i $i 0 32 3 20
	$pvExtract UpdateParameterWidgets
	$pvExtract AcceptCallback
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }

    [$pvGlyph GetNthPVOutput 0] SetVisibility 0
    [$pvExtract GetNthPVOutput 0] SetVisibility 0

    [$pvPlot3D GetNthPVOutput 0] SetVisibility 0
    RenWin1 Render

}

proc BlowMoldingDemoInit {} {
    global DataDir

    # hack to get the window.
    set pvWindow [lindex [vtkPVWindow ListInstances] 0]

    set reader [$pvWindow Open "$DataDir/blow.vtk"]

    Ren1 ResetCamera
    
    set wInt [$pvWindow GetSourceInterface "vtkWarpVector"]
    set pvWarp [$wInt CreateCallback]
    $pvWarp UpdateParameterWidgets
    $pvWarp AcceptCallback

    set lsInt [$pvWindow GetSourceInterface "vtkLoopSubdivisionFilter"]
    set pvSub [$lsInt CreateCallback] 
    [$pvSub GetVTKSource] SetNumberOfSubdivisions 2
    $pvSub UpdateParameterWidgets
    $pvSub AcceptCallback

    set nInt [$pvWindow GetSourceInterface "vtkPPolyDataNormals"]
    set pvNormals [$nInt CreateCallback]
    [$pvNormals GetVTKSource] SetFeatureAngle 60
    $pvNormals UpdateParameterWidgets
    $pvNormals AcceptCallback
    
    set warpOutput [$pvWarp GetNthPVOutput 0]
    $warpOutput SetVisibility 0

    set subOutput [$pvSub GetNthPVOutput 0]
    $subOutput SetVisibility 0

    set normalsOutput [$pvNormals GetNthPVOutput 0]
    $normalsOutput SetVisibility 0

    return "$pvWarp $pvSub $pvNormals"
}

proc BlowMoldingDemoRun { pvWarp pvSub pvNormals } {

    global pvDemoShouldStop

    set pvWindow [lindex [vtkPVWindow ListInstances] 0]
    $pvWindow SetCurrentPVSource $pvWarp
    
    set camera [Ren1 GetActiveCamera]
    $camera SetPosition 143.632 4.67034 -39.8384
    $camera SetFocalPoint 2 12 4.1578e-15
    $camera SetViewUp 0.270701 -0.00149368 0.962662
    $camera SetViewAngle 30
    $camera SetClippingRange 127.006 167.567

    set normalsOutput [$pvNormals GetNthPVOutput 0]
    $normalsOutput SetVisibility 1

    [$pvWarp GetVectorOperationMenu] SetValue displacement1
    $pvWarp ChangeVectors
    $normalsOutput ColorByPointFieldComponent thickness1 0

    for {set i 1} {$i <= 10} {incr i 1} {
	[$pvWarp GetVectorOperationMenu] SetValue displacement$i
	$pvWarp ChangeVectors
	$normalsOutput ColorByPointFieldComponent thickness$i 0
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }

    $normalsOutput SetVisibility 0

    after 2000

    set warpOutput [$pvWarp GetNthPVOutput 0]
    [$pvWarp GetVectorOperationMenu] SetValue displacement1
    $pvWarp ChangeVectors
    $warpOutput ColorByPointFieldComponent thickness1 0

    $warpOutput SetVisibility 1

    for {set i 1} {$i <= 10} {incr i 1} {
	[$pvWarp GetVectorOperationMenu] SetValue displacement$i
	$pvWarp ChangeVectors
	$warpOutput ColorByPointFieldComponent thickness$i 0
	RenWin1 Render
	after 100
	update

	if $pvDemoShouldStop {
	    RenWin1 Render
	    return
	}
    }
    after 2000

    $warpOutput SetVisibility 0
    RenWin1 Render
}

if $FoundFiles {
    set Demos { SphereDemo CombustorDemo BlowMoldingDemo }
    set length [llength $Demos]

    
    set pvDemoShouldExit 0
    set pvDemoStopNow 0

    if ![info exists pvDemoShouldStop] {
	global pvDemoShouldStop
	
	toplevel .control
	button .control.stop -text "Stop" -command {set pvDemoShouldStop 1}
	pack .control.stop
	
	set pvDemoShouldStop 0
	for {set i 0} {$i < $length} {incr i 1} {
	    set TestName [lindex $Demos $i]
	    set pvDemoRetVals($TestName) [eval ${TestName}Init]
	}
	if $pvDemoShouldStop { set pvDemoStopNow 1 }
	
    }
    
    if !$pvDemoStopNow {
	set pvDemoShouldStop 0
    }
    
    while 1 {
	for {set i 0} {$i < $length} {incr i 1} {
	    set TestName [lindex $Demos $i]
	    eval ${TestName}Run $pvDemoRetVals($TestName)
	    if $pvDemoShouldStop break;
	}
	if $pvDemoShouldStop break;
    }
    if $pvDemoShouldExit { Application Exit }
}
