    if {[info exists argc]} { 
        set argcm1 [expr $argc - 1]
        for {set i 0} {$i < $argcm1} {incr i} {
            if {[lindex $argv $i] == "-D" && $i < $argcm1} {
		set DataDir [lindex $argv [expr $i + 1]]
            }
        }
    } 


# The intent of this test is to generate a trace
# and source it to show that the trace worked.

set pv(vtkTemp1) [Application GetMainWindow]
set pv(vtkTemp43) [$pv(vtkTemp1) GetMainView]
set pv(vtkTemp89) [$pv(vtkTemp1) GetGlyphSource Arrow]
set pv(vtkTemp93) [$pv(vtkTemp1) GetGlyphSource Cone]
set pv(vtkTemp97) [$pv(vtkTemp1) GetGlyphSource Sphere]

# Excercise all of the different types of PV widgets.

set pv(vtkTemp98) [$pv(vtkTemp1) CreatePVSource vtkPLOT3DReader]
set pv(vtkTemp110) [$pv(vtkTemp98) GetPVWidget {XYZFileName}]
$pv(vtkTemp110) SetValue $DataDir/Data/combxyz.bin
set pv(vtkTemp114) [$pv(vtkTemp98) GetPVWidget {QFileName}]
$pv(vtkTemp114) SetValue $DataDir/Data/combq.bin
$pv(vtkTemp98) AcceptCallback

# A mistake, but I will leave it here
set pv(vtkTemp154) [$pv(vtkTemp1) CreatePVSource vtkDataSetSurfaceFilter]
$pv(vtkTemp154) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp98)
$pv(vtkTemp1) ShowCurrentSourceProperties

set pv(vtkTemp167) [$pv(vtkTemp1) CreatePVSource vtkSphereSource]
$pv(vtkTemp167) AcceptCallback
$pv(vtkTemp1) ResetCameraCallback
set pv(vtkTemp184) [$pv(vtkTemp167) GetPVWidget {Radius}]
$pv(vtkTemp184) SetValue 3
$pv(vtkTemp167) AcceptCallback
$pv(vtkTemp184) SetValue 5
$pv(vtkTemp167) AcceptCallback

set pv(vtkTemp230) [$pv(vtkTemp1) GlyphCallback]
set pv(vtkTemp238) [$pv(vtkTemp230) GetPVWidget {Input}]
$pv(vtkTemp238) SetCurrentValue $pv(vtkTemp167)
set pv(vtkTemp239) [$pv(vtkTemp230) GetPVWidget {Glyph}]
$pv(vtkTemp239) SetCurrentValue $pv(vtkTemp89)
$pv(vtkTemp230) AcceptCallback
$pv(vtkTemp239) SetCurrentValue $pv(vtkTemp93)
set pv(vtkTemp251) [$pv(vtkTemp230) GetPVWidget {Scale Factor}]
$pv(vtkTemp251) SetValue 2
$pv(vtkTemp230) AcceptCallback
set pv(vtkTemp245) [$pv(vtkTemp230) GetPVWidget {Orient}]
$pv(vtkTemp245) SetState 0
$pv(vtkTemp230) AcceptCallback
set pv(vtkTemp265) [$pv(vtkTemp1) CreatePVSource vtkDataSetSurfaceFilter]
set pv(vtkTemp274) [$pv(vtkTemp265) GetPVWidget {Input}]
$pv(vtkTemp274) SetCurrentValue $pv(vtkTemp230)
$pv(vtkTemp265) AcceptCallback
$pv(vtkTemp274) SetCurrentValue $pv(vtkTemp98)
$pv(vtkTemp265) AcceptCallback
$pv(vtkTemp1) ResetCameraCallback

set pv(vtkTemp286) [$pv(vtkTemp1) CalculatorCallback]
$pv(vtkTemp286) AddScalarVariable Momentum_0 Momentum 0
$pv(vtkTemp286) AddScalarVariable Momentum_1 Momentum 1
$pv(vtkTemp286) SetFunctionLabel {Momentum_0+Momentum_1}
set pv(vtkTemp298) [$pv(vtkTemp286) GetPVWidget {Result Array Name:}]
$pv(vtkTemp298) SetValue {sum}
$pv(vtkTemp286) AcceptCallback

# Test the Plane widget tracing.

set kw(vtkTemp285) [$pv(vtkTemp1) CreatePVSource vtkSphereSource]
set kw(vtkTemp295) [$kw(vtkTemp285) GetPVWidget {Center}]
set kw(vtkTemp300) [$kw(vtkTemp285) GetPVWidget {Radius}]
$kw(vtkTemp300) SetValue 5
$kw(vtkTemp295) SetValue 0 15 0
$kw(vtkTemp285) AcceptCallback

$pv(vtkTemp1) ResetCameraCallback

set kw(vtkTemp327) [$pv(vtkTemp1) ClipPlaneCallback]
set kw(vtkTemp334) [$kw(vtkTemp327) GetPVWidget {Plane}]
set kw(vtkTemp335) [$kw(vtkTemp334) GetCenterEntry]
$kw(vtkTemp335) SetValue 0 16 0
set kw(vtkTemp336) [$kw(vtkTemp334) GetNormalEntry]
$kw(vtkTemp336) SetValue 0.57546 0.76627 -0.28578
set kw(vtkTemp337) [$kw(vtkTemp327) GetPVWidget {Offset}]
$kw(vtkTemp337) SetValue 1
$kw(vtkTemp327) AcceptCallback



# OK, turn off the trace so that the file we source is not open.

Application StopRecordingScript

# Delete all the sources

$pv(vtkTemp1) SetCurrentPVSource $kw(vtkTemp327)
$kw(vtkTemp327) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $kw(vtkTemp285)
$kw(vtkTemp285) DeleteCallback

$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp286)
$pv(vtkTemp286) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp265)
$pv(vtkTemp265) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp98)
$pv(vtkTemp98) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp230)
$pv(vtkTemp230) DeleteCallback
$pv(vtkTemp1) SetCurrentPVSource $pv(vtkTemp167)
$pv(vtkTemp167) DeleteCallback


# Source the trace to regenerate the sources.
if {[catch {set channel [open test.tmp w]}] == 0 } {
   close $channel
   file delete -force test.tmp

   source "ParaViewTrace.pvs"
}


# Fix the size of the image.
RenWin1 SetSize 300 300
RenWin1 Render
update

source $DataDir/Utility/rtImage.tcl
pvImageTest $DataDir/Baseline/Trace.png 10
   
Application Exit


