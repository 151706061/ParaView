if {[info exists argc]} { 
    set argcm1 [expr $argc - 1]
    for {set i 0} {$i < $argcm1} {incr i} {
        if {[lindex $argv $i] == "-D" && $i < $argcm1} {
		set DataDir [lindex $argv [expr $i + 1]]
        }
    }
} 

# hack to get the window.
set pvWindow [lindex [vtkPVWindow ListInstances] 0]
set pv(vtkTemp43) [$pvWindow GetMainView]
$pv(vtkTemp43) SetBackgroundColor 0 0 0

set pvSphere [$pvWindow CreatePVSource SphereSource]
[$pvSphere GetPVWidget {Theta Resolution}] SetValue 16
$pvSphere AcceptCallback

set pvShrink [$pvWindow CreatePVSource ShrinkPolyData]
[$pvShrink GetPVWidget {ShrinkFactor}] SetValue 0.9
$pvShrink AcceptCallback

set pvElevation [$pvWindow CreatePVSource ElevationFilter]
$pvElevation AcceptCallback

set pvExtract [$pvWindow CreatePVSource ExtractEdges]
$pvExtract AcceptCallback

set extractOutput [$pvExtract GetPVOutput]
$extractOutput ColorByProperty

set elevOutput [$pvElevation GetPVOutput]
$elevOutput SetVisibility 1


set pvWindow [lindex [vtkPVWindow ListInstances] 0]
$pvWindow SetCurrentPVSource $pvSphere

set camera [Ren1 GetActiveCamera]
$camera SetPosition 0 0 3.41078
$camera SetFocalPoint 0 0 0
$camera SetViewUp 0 1 0
$camera SetViewAngle 30
$camera SetClippingRange 2.38825 4.70618

$elevOutput SetVisibility 1
$extractOutput SetVisibility 1

# Retrace
update
Application StopRecordingScript
[ Application GetMainWindow ] DeleteAllSources
# Source the trace to regenerate the sources.
if {[catch {set channel [open test.tmp w]}] == 0 } {
   close $channel
   file delete -force test.tmp
   source "ParaViewTrace.pvs"
}

# Fix the size of the image.
RenWin1 SetSize 300 300
for {set i 0} {$i < 100} {incr i 1} {
	set camera [Ren1 GetActiveCamera]
	$camera Azimuth 10
	RenWin1 Render
	update
}

for {set i  1} {$i < [expr $argc - 1]} {incr i} {
	if {[lindex $argv $i] == "-C"} {
	    source [lindex $argv [expr $i + 1]]
	    $Application SetExitStatus [CompareImage [[Application GetMainWindow] GetMainView]]
	}
}

Application Exit


