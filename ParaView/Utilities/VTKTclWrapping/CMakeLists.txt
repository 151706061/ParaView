PROJECT(VTKTclWrapping)

IF(NOT VTKTclWrapping_INSTALL_LIB_DIR)
  SET(VTKTclWrapping_INSTALL_LIB_DIR "/lib/${PROJECT_NAME}")
ENDIF(NOT VTKTclWrapping_INSTALL_LIB_DIR)
IF(NOT VTKTclWrapping_INSTALL_BIN_DIR)
  SET(VTKTclWrapping_INSTALL_BIN_DIR "/bin")
ENDIF(NOT VTKTclWrapping_INSTALL_BIN_DIR)

# Let parent project set VTKTclWrapping_INSTALL_NO_DEVELOPMENT or
# VTKTclWrapping_INSTALL_NO_RUNTIME to remove components from the installation.
SET(VTKTclWrapping_INSTALL_NO_LIBRARIES)
IF(BUILD_SHARED_LIBS)
  IF(VTKTclWrapping_INSTALL_NO_RUNTIME AND VTKTclWrapping_INSTALL_NO_DEVELOPMENT)
    SET(VTKTclWrapping_INSTALL_NO_LIBRARIES 1)
  ENDIF(VTKTclWrapping_INSTALL_NO_RUNTIME AND VTKTclWrapping_INSTALL_NO_DEVELOPMENT)
ELSE(BUILD_SHARED_LIBS)
  IF(VTKTclWrapping_INSTALL_NO_DEVELOPMENT)
    SET(VTKTclWrapping_INSTALL_NO_LIBRARIES 1)
  ENDIF(VTKTclWrapping_INSTALL_NO_DEVELOPMENT)
ENDIF(BUILD_SHARED_LIBS)

# We only wrap subportion of VTK, so include only that
INCLUDE_DIRECTORIES(
  ${VTK_SOURCE_DIR}/Wrapping
  ${VTK_SOURCE_DIR}
  ${VTK_BINARY_DIR}
  ${VTK_BINARY_DIR}/Utilities
  ${VTK_SOURCE_DIR}/IO
  ${VTK_SOURCE_DIR}/Common
  ${VTK_SOURCE_DIR}/Filtering
  ${VTK_BINARY_DIR}/Rendering
  ${TK_INCLUDE_PATH}
  ${TCL_INCLUDE_PATH}
  ${TK_INTERNAL_PATH}
  )

# OpenGL include directories.
IF(APPLE)
  IF(VTK_USE_X)
    SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
      ${OPENGL_INCLUDE_DIR})
  ENDIF(VTK_USE_X)
ELSE(APPLE)
  SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
    ${OPENGL_INCLUDE_DIR})
ENDIF(APPLE)

IF(VTK_USE_X)
  # X include directories.
  SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
    ${CMAKE_Xlib_INCLUDE_PATH} ${CMAKE_Xutil_INCLUDE_PATH})
ENDIF(VTK_USE_X)

IF(VTK_HAVE_VP1000)
  # VolumePro VP 1000 include directory.
  SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
    ${VLI_INCLUDE_PATH_FOR_VP1000})
ENDIF(VTK_HAVE_VP1000)

IF(VTK_USE_MANGLED_MESA)
  # Mangled Mesa include directory.
  SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
    ${MESA_INCLUDE_PATH})
ELSE(VTK_USE_MANGLED_MESA)
  # Off-Screen Mesa include directory.
  IF(VTK_OPENGL_HAS_OSMESA)
    IF(OSMESA_INCLUDE_DIR)
      SET(PVWRAP_OPEN_GL_DIRS ${PVWRAP_OPEN_GL_DIRS}
        ${OSMESA_INCLUDE_DIR})
    ENDIF(OSMESA_INCLUDE_DIR)
  ENDIF(VTK_OPENGL_HAS_OSMESA)
ENDIF(VTK_USE_MANGLED_MESA)

INCLUDE_DIRECTORIES(${PVWRAP_OPEN_GL_DIRS})
SET(CMAKE_C_FLAGS "${CMAKE_ANSI_CFLAGS} ${CMAKE_C_FLAGS}")

ADD_EXECUTABLE(vtkWrapTcl 
  ${VTK_SOURCE_DIR}/Wrapping/vtkWrapTcl.c 
  ${VTK_SOURCE_DIR}/Wrapping/vtkParse.tab.c)
ADD_EXECUTABLE(vtkWrapTclInit 
  ${VTK_SOURCE_DIR}/Wrapping/vtkWrapTclInit.c)

SET(VTK_TCL_FILES
  "${VTK_SOURCE_DIR}/Common/vtkCollection.cxx"
  "${VTK_SOURCE_DIR}/Common/vtkCollectionIterator.cxx"
  "${VTK_SOURCE_DIR}/Common/vtkObject.cxx"
  "${VTK_SOURCE_DIR}/Common/vtkObjectBase.cxx"
  "${VTK_SOURCE_DIR}/Common/vtkTimerLog.cxx"
  "${VTK_SOURCE_DIR}/IO/vtkXMLParser.cxx"
)

SET_SOURCE_FILES_PROPERTIES(
  "${VTK_SOURCE_DIR}/Common/vtkObjectBase.cxx"
  ABSTRACT
  )

# This requires wrapping a few more files.
# ie.. when distributing, build without testing to get smaller binaries
IF(BUILD_TESTING)
  SET(VTK_TCL_FILES
    ${VTK_TCL_FILES}
    "${VTK_SOURCE_DIR}/Filtering/vtkDataObject.cxx"
    "${VTK_SOURCE_DIR}/Filtering/vtkDataSet.cxx"
    "${VTK_SOURCE_DIR}/Filtering/vtkImageData.cxx"
  )
  SET_SOURCE_FILES_PROPERTIES(
    "${VTK_SOURCE_DIR}/Filtering/vtkDataSet.cxx"
    ABSTRACT
  )
ENDIF(BUILD_TESTING)
  

SET(EXE_EXT "")
IF(WIN32)
  SET(EXE_EXT ".exe")
ENDIF(WIN32)

SET(MAKE_SYSTEM)
IF(CMAKE_BUILD_TOOL MATCHES "make")
  SET(MAKE_SYSTEM 1)
ENDIF(CMAKE_BUILD_TOOL MATCHES "make")

SET(CFG_INIT "/${CMAKE_CFG_INTDIR}")
IF(MAKE_SYSTEM OR UNIX)
  SET(CFG_INIT "")
ENDIF(MAKE_SYSTEM OR UNIX)

SET(VTK_WRAP_TCL_EXE 
  "${EXECUTABLE_OUTPUT_PATH}${CFG_INIT}/vtkWrapTcl${EXE_EXT}"
  CACHE INTERNAL "Location of program to do tcl wrapping")
SET(VTK_WRAP_TCL_INIT_EXE 
  "${EXECUTABLE_OUTPUT_PATH}${CFG_INIT}/vtkWrapTclInit${EXE_EXT}"
  CACHE INTERNAL "Location of program to do tcl wrapping")
INCLUDE("${VTK_CMAKE_DIR}/vtkWrapTcl.cmake")
VTK_WRAP_TCL3(vtkCommonTCL vtkTCLSources "${VTK_TCL_FILES}" "")

ADD_LIBRARY(vtkCommonTCL ${vtkTCLSources}
  "${VTK_SOURCE_DIR}/Common/vtkTclUtil.cxx"
  "${VTK_SOURCE_DIR}/Rendering/vtkTkRenderWidget.cxx"
  "${VTK_SOURCE_DIR}/Rendering/vtkTkImageViewerWidget.cxx"
  )
TARGET_LINK_LIBRARIES(vtkCommonTCL 
  vtkCommon
  vtkIO
  vtkRendering
  )

IF(TCL_LIBRARY_DEBUG)
  TARGET_LINK_LIBRARIES(vtkCommonTCL optimized ${TCL_LIBRARY} debug ${TCL_LIBRARY_DEBUG})
ELSE(TCL_LIBRARY_DEBUG)
  TARGET_LINK_LIBRARIES(vtkCommonTCL ${TCL_LIBRARY})
ENDIF(TCL_LIBRARY_DEBUG)

IF(TK_LIBRARY_DEBUG)
  TARGET_LINK_LIBRARIES(vtkCommonTCL optimized ${TK_LIBRARY} debug ${TK_LIBRARY_DEBUG})
ELSE(TK_LIBRARY_DEBUG)
  TARGET_LINK_LIBRARIES(vtkCommonTCL ${TK_LIBRARY})
ENDIF(TK_LIBRARY_DEBUG)

IF(UNIX)
  # On UNIX, Tcl needs the math library.
  IF(UNIX)
    TARGET_LINK_LIBRARIES(vtkCommonTCL -lm)
  ENDIF(UNIX)

  # If using X with Tk, we need to link to X when we link
  # to Tk in order to support static linking.
  IF(CMAKE_HAS_X)
    TARGET_LINK_LIBRARIES(vtkCommonTCL -lXt ${CMAKE_X_LIBS})
  ENDIF(CMAKE_HAS_X)
ENDIF(UNIX)

IF(NOT VTKTclWrapping_INSTALL_NO_LIBRARIES)
  INSTALL_TARGETS(${VTKTclWrapping_INSTALL_LIB_DIR} RUNTIME_DIRECTORY ${VTKTclWrapping_INSTALL_BIN_DIR} vtkCommonTCL)
ENDIF(NOT VTKTclWrapping_INSTALL_NO_LIBRARIES)
